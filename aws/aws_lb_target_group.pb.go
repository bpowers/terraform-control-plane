// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aws_lb_target_group.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AwsLbTargetGroup struct {
	Arn                 string                          `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	ArnSuffix           string                          `protobuf:"bytes,2,opt,name=arn_suffix,json=arnSuffix,proto3" json:"arn_suffix,omitempty"`
	DeregistrationDelay int64                           `protobuf:"varint,3,opt,name=deregistration_delay,json=deregistrationDelay,proto3" json:"deregistration_delay,omitempty"`
	HealthCheck         []*AwsLbTargetGroup_HealthCheck `protobuf:"bytes,4,rep,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	Name                string                          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NamePrefix          string                          `protobuf:"bytes,6,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	Port                int64                           `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	Protocol            string                          `protobuf:"bytes,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProxyProtocolV_2    bool                            `protobuf:"varint,9,opt,name=proxy_protocol_v_2,json=proxyProtocolV2,proto3" json:"proxy_protocol_v_2,omitempty"`
	SlowStart           int64                           `protobuf:"varint,10,opt,name=slow_start,json=slowStart,proto3" json:"slow_start,omitempty"`
	Stickiness          []*AwsLbTargetGroup_Stickiness  `protobuf:"bytes,11,rep,name=stickiness,proto3" json:"stickiness,omitempty"`
	Tags                map[string]string               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetType          string                          `protobuf:"bytes,13,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	VpcId               string                          `protobuf:"bytes,14,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (m *AwsLbTargetGroup) Reset()         { *m = AwsLbTargetGroup{} }
func (m *AwsLbTargetGroup) String() string { return proto.CompactTextString(m) }
func (*AwsLbTargetGroup) ProtoMessage()    {}
func (*AwsLbTargetGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86254eac0485aee, []int{0}
}
func (m *AwsLbTargetGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbTargetGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbTargetGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbTargetGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbTargetGroup.Merge(m, src)
}
func (m *AwsLbTargetGroup) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbTargetGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbTargetGroup.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbTargetGroup proto.InternalMessageInfo

func (m *AwsLbTargetGroup) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *AwsLbTargetGroup) GetArnSuffix() string {
	if m != nil {
		return m.ArnSuffix
	}
	return ""
}

func (m *AwsLbTargetGroup) GetDeregistrationDelay() int64 {
	if m != nil {
		return m.DeregistrationDelay
	}
	return 0
}

func (m *AwsLbTargetGroup) GetHealthCheck() []*AwsLbTargetGroup_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *AwsLbTargetGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AwsLbTargetGroup) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *AwsLbTargetGroup) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AwsLbTargetGroup) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AwsLbTargetGroup) GetProxyProtocolV_2() bool {
	if m != nil {
		return m.ProxyProtocolV_2
	}
	return false
}

func (m *AwsLbTargetGroup) GetSlowStart() int64 {
	if m != nil {
		return m.SlowStart
	}
	return 0
}

func (m *AwsLbTargetGroup) GetStickiness() []*AwsLbTargetGroup_Stickiness {
	if m != nil {
		return m.Stickiness
	}
	return nil
}

func (m *AwsLbTargetGroup) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AwsLbTargetGroup) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *AwsLbTargetGroup) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

type AwsLbTargetGroup_HealthCheck struct {
	HealthyThreshold   int64  `protobuf:"varint,1,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	Interval           int64  `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Matcher            string `protobuf:"bytes,3,opt,name=matcher,proto3" json:"matcher,omitempty"`
	Path               string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Port               string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	Protocol           string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Timeout            int64  `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	UnhealthyThreshold int64  `protobuf:"varint,8,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
}

func (m *AwsLbTargetGroup_HealthCheck) Reset()         { *m = AwsLbTargetGroup_HealthCheck{} }
func (m *AwsLbTargetGroup_HealthCheck) String() string { return proto.CompactTextString(m) }
func (*AwsLbTargetGroup_HealthCheck) ProtoMessage()    {}
func (*AwsLbTargetGroup_HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86254eac0485aee, []int{0, 0}
}
func (m *AwsLbTargetGroup_HealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbTargetGroup_HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbTargetGroup_HealthCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbTargetGroup_HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbTargetGroup_HealthCheck.Merge(m, src)
}
func (m *AwsLbTargetGroup_HealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbTargetGroup_HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbTargetGroup_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbTargetGroup_HealthCheck proto.InternalMessageInfo

func (m *AwsLbTargetGroup_HealthCheck) GetHealthyThreshold() int64 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *AwsLbTargetGroup_HealthCheck) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *AwsLbTargetGroup_HealthCheck) GetMatcher() string {
	if m != nil {
		return m.Matcher
	}
	return ""
}

func (m *AwsLbTargetGroup_HealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AwsLbTargetGroup_HealthCheck) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *AwsLbTargetGroup_HealthCheck) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AwsLbTargetGroup_HealthCheck) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *AwsLbTargetGroup_HealthCheck) GetUnhealthyThreshold() int64 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

type AwsLbTargetGroup_Stickiness struct {
	CookieDuration int64  `protobuf:"varint,1,opt,name=cookie_duration,json=cookieDuration,proto3" json:"cookie_duration,omitempty"`
	Enabled        bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *AwsLbTargetGroup_Stickiness) Reset()         { *m = AwsLbTargetGroup_Stickiness{} }
func (m *AwsLbTargetGroup_Stickiness) String() string { return proto.CompactTextString(m) }
func (*AwsLbTargetGroup_Stickiness) ProtoMessage()    {}
func (*AwsLbTargetGroup_Stickiness) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86254eac0485aee, []int{0, 1}
}
func (m *AwsLbTargetGroup_Stickiness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbTargetGroup_Stickiness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbTargetGroup_Stickiness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbTargetGroup_Stickiness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbTargetGroup_Stickiness.Merge(m, src)
}
func (m *AwsLbTargetGroup_Stickiness) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbTargetGroup_Stickiness) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbTargetGroup_Stickiness.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbTargetGroup_Stickiness proto.InternalMessageInfo

func (m *AwsLbTargetGroup_Stickiness) GetCookieDuration() int64 {
	if m != nil {
		return m.CookieDuration
	}
	return 0
}

func (m *AwsLbTargetGroup_Stickiness) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AwsLbTargetGroup_Stickiness) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsLbTargetGroup)(nil), "terraform.aws.AwsLbTargetGroup")
	proto.RegisterMapType((map[string]string)(nil), "terraform.aws.AwsLbTargetGroup.TagsEntry")
	proto.RegisterType((*AwsLbTargetGroup_HealthCheck)(nil), "terraform.aws.AwsLbTargetGroup.HealthCheck")
	proto.RegisterType((*AwsLbTargetGroup_Stickiness)(nil), "terraform.aws.AwsLbTargetGroup.Stickiness")
}

func init() { proto.RegisterFile("aws_lb_target_group.proto", fileDescriptor_a86254eac0485aee) }

var fileDescriptor_a86254eac0485aee = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xae, 0x9b, 0x34, 0x8f, 0x49, 0x5f, 0x6c, 0x8b, 0xb4, 0x44, 0xc2, 0x44, 0x5c, 0x08, 0x54,
	0x0a, 0xa2, 0x1c, 0x40, 0x48, 0x1c, 0x80, 0x22, 0x1e, 0x42, 0xa8, 0x72, 0x23, 0xae, 0xab, 0x8d,
	0xbd, 0x8d, 0xad, 0x38, 0x5e, 0x6b, 0x77, 0x9d, 0xd4, 0xff, 0x82, 0x9f, 0xc5, 0xb1, 0x47, 0xc4,
	0x09, 0x35, 0x3f, 0x04, 0xb4, 0xe3, 0x47, 0x5f, 0x87, 0x9e, 0x3c, 0xf3, 0x7d, 0x3b, 0xeb, 0xf9,
	0xe6, 0x9b, 0x85, 0x07, 0x7c, 0xa9, 0x59, 0x3c, 0x61, 0x86, 0xab, 0xa9, 0x30, 0x6c, 0xaa, 0x64,
	0x96, 0x8e, 0x52, 0x25, 0x8d, 0x24, 0x5b, 0x46, 0x28, 0xc5, 0x4f, 0xa5, 0x9a, 0x8f, 0xf8, 0x52,
	0x3f, 0xfe, 0xd3, 0x86, 0xdd, 0x77, 0x4b, 0xfd, 0x6d, 0x32, 0xc6, 0xa3, 0x9f, 0xec, 0x49, 0xb2,
	0x0b, 0x0d, 0xae, 0x12, 0xea, 0x0c, 0x9c, 0x61, 0xd7, 0xb3, 0x21, 0x79, 0x08, 0xc0, 0x55, 0xc2,
	0x74, 0x76, 0x7a, 0x1a, 0x9d, 0xd1, 0x75, 0x24, 0xba, 0x5c, 0x25, 0x27, 0x08, 0x90, 0x17, 0xb0,
	0x1f, 0x08, 0x25, 0xa6, 0x91, 0x36, 0x8a, 0x9b, 0x48, 0x26, 0x2c, 0x10, 0x31, 0xcf, 0x69, 0x63,
	0xe0, 0x0c, 0x1b, 0xde, 0xde, 0x75, 0xee, 0xc8, 0x52, 0xe4, 0x3b, 0x6c, 0x86, 0x82, 0xc7, 0x26,
	0x64, 0x7e, 0x28, 0xfc, 0x19, 0x6d, 0x0e, 0x1a, 0xc3, 0xde, 0xe1, 0xc1, 0xe8, 0x5a, 0x7b, 0xa3,
	0x9b, 0xad, 0x8d, 0x3e, 0x63, 0xcd, 0x07, 0x5b, 0xe2, 0xf5, 0xc2, 0xcb, 0x84, 0x10, 0x68, 0x26,
	0x7c, 0x2e, 0xe8, 0x06, 0xf6, 0x86, 0x31, 0x79, 0x04, 0x3d, 0xfb, 0x65, 0xa9, 0x12, 0xb6, 0xed,
	0x16, 0x52, 0x60, 0xa1, 0x63, 0x44, 0x6c, 0x51, 0x2a, 0x95, 0xa1, 0x6d, 0xec, 0x13, 0x63, 0xd2,
	0x87, 0x0e, 0x4e, 0xca, 0x97, 0x31, 0xed, 0x60, 0x45, 0x9d, 0x93, 0x03, 0x20, 0xa9, 0x92, 0x67,
	0x39, 0xab, 0x10, 0xb6, 0x60, 0x87, 0xb4, 0x3b, 0x70, 0x86, 0x1d, 0x6f, 0x07, 0x99, 0xe3, 0x92,
	0xf8, 0x71, 0x68, 0x67, 0xa6, 0x63, 0xb9, 0x64, 0xda, 0x70, 0x65, 0x28, 0xe0, 0x2f, 0xba, 0x16,
	0x39, 0xb1, 0x00, 0xf9, 0x0a, 0xa0, 0x4d, 0xe4, 0xcf, 0xa2, 0x44, 0x68, 0x4d, 0x7b, 0x28, 0xff,
	0xd9, 0x5d, 0xf2, 0x4f, 0xea, 0x0a, 0xef, 0x4a, 0x35, 0x79, 0x0b, 0x4d, 0xc3, 0xa7, 0x9a, 0x6e,
	0xe2, 0x2d, 0x4f, 0xef, 0xba, 0x65, 0xcc, 0xa7, 0xfa, 0x63, 0x62, 0x54, 0xee, 0x61, 0x99, 0x9d,
	0x53, 0xb9, 0x29, 0x26, 0x4f, 0x05, 0xdd, 0x2a, 0xe6, 0x54, 0x40, 0xe3, 0x3c, 0x15, 0xe4, 0x3e,
	0xb4, 0x16, 0xa9, 0xcf, 0xa2, 0x80, 0x6e, 0x23, 0xb7, 0xb1, 0x48, 0xfd, 0x2f, 0x41, 0xff, 0x9f,
	0x03, 0xbd, 0x2b, 0x86, 0x90, 0x03, 0xb8, 0x57, 0x58, 0x92, 0x33, 0x13, 0x2a, 0xa1, 0x43, 0x19,
	0x07, 0xb8, 0x45, 0x0d, 0x6f, 0xb7, 0x24, 0xc6, 0x15, 0x6e, 0xe7, 0x1c, 0x25, 0x46, 0xa8, 0x05,
	0x8f, 0x71, 0xa1, 0x1a, 0x5e, 0x9d, 0x13, 0x0a, 0xed, 0x39, 0x37, 0x7e, 0x28, 0x14, 0xae, 0x50,
	0xd7, 0xab, 0x52, 0x74, 0x8c, 0x9b, 0x90, 0x36, 0x0b, 0x9b, 0x6d, 0x5c, 0xbb, 0x58, 0x5a, 0x7f,
	0xcb, 0xc5, 0xd6, 0x0d, 0x17, 0x29, 0xb4, 0x4d, 0x34, 0x17, 0x32, 0xab, 0x8c, 0xaf, 0x52, 0xf2,
	0x1c, 0xf6, 0xb2, 0xe4, 0xb6, 0x84, 0x0e, 0x9e, 0x22, 0x35, 0x55, 0x8b, 0xe8, 0xfb, 0x00, 0x97,
	0x96, 0x90, 0x27, 0xb0, 0xe3, 0x4b, 0x39, 0x8b, 0x04, 0x0b, 0xb2, 0x62, 0xd7, 0x4b, 0xf5, 0xdb,
	0x05, 0x7c, 0x54, 0xa2, 0xb6, 0x03, 0x91, 0xf0, 0x49, 0x2c, 0x02, 0x94, 0xde, 0xf1, 0xaa, 0xd4,
	0x6a, 0x41, 0x0f, 0x0a, 0xd9, 0x18, 0xf7, 0x5f, 0x41, 0xb7, 0x76, 0xcc, 0xbe, 0xcd, 0x99, 0xc8,
	0xab, 0xb7, 0x39, 0x13, 0x39, 0xd9, 0x87, 0x8d, 0x05, 0x8f, 0x33, 0x51, 0x3e, 0xcb, 0x22, 0x79,
	0xb3, 0xfe, 0xda, 0x79, 0x4f, 0x7f, 0x5d, 0xb8, 0xce, 0xf9, 0x85, 0xeb, 0xfc, 0xbd, 0x70, 0x9d,
	0x9f, 0x2b, 0x77, 0xed, 0x7c, 0xe5, 0xae, 0xfd, 0x5e, 0xb9, 0x6b, 0x93, 0x16, 0x0e, 0xe3, 0xe5,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xdb, 0x54, 0x71, 0x29, 0x04, 0x00, 0x00,
}

func (m *AwsLbTargetGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbTargetGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.ArnSuffix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.ArnSuffix)))
		i += copy(dAtA[i:], m.ArnSuffix)
	}
	if m.DeregistrationDelay != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.DeregistrationDelay))
	}
	if len(m.HealthCheck) > 0 {
		for _, msg := range m.HealthCheck {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NamePrefix) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.NamePrefix)))
		i += copy(dAtA[i:], m.NamePrefix)
	}
	if m.Port != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.Port))
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.ProxyProtocolV_2 {
		dAtA[i] = 0x48
		i++
		if m.ProxyProtocolV_2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlowStart != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.SlowStart))
	}
	if len(m.Stickiness) > 0 {
		for _, msg := range m.Stickiness {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x62
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAwsLbTargetGroup(uint64(len(k))) + 1 + len(v) + sovAwsLbTargetGroup(uint64(len(v)))
			i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TargetType) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.TargetType)))
		i += copy(dAtA[i:], m.TargetType)
	}
	if len(m.VpcId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	return i, nil
}

func (m *AwsLbTargetGroup_HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbTargetGroup_HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.HealthyThreshold))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.Interval))
	}
	if len(m.Matcher) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Matcher)))
		i += copy(dAtA[i:], m.Matcher)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.Timeout))
	}
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	return i, nil
}

func (m *AwsLbTargetGroup_Stickiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbTargetGroup_Stickiness) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CookieDuration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(m.CookieDuration))
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbTargetGroup(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func encodeVarintAwsLbTargetGroup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AwsLbTargetGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.ArnSuffix)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	if m.DeregistrationDelay != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.DeregistrationDelay))
	}
	if len(m.HealthCheck) > 0 {
		for _, e := range m.HealthCheck {
			l = e.Size()
			n += 1 + l + sovAwsLbTargetGroup(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.NamePrefix)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	if m.ProxyProtocolV_2 {
		n += 2
	}
	if m.SlowStart != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.SlowStart))
	}
	if len(m.Stickiness) > 0 {
		for _, e := range m.Stickiness {
			l = e.Size()
			n += 1 + l + sovAwsLbTargetGroup(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAwsLbTargetGroup(uint64(len(k))) + 1 + len(v) + sovAwsLbTargetGroup(uint64(len(v)))
			n += mapEntrySize + 1 + sovAwsLbTargetGroup(uint64(mapEntrySize))
		}
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	return n
}

func (m *AwsLbTargetGroup_HealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthyThreshold != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.HealthyThreshold))
	}
	if m.Interval != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.Interval))
	}
	l = len(m.Matcher)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.Timeout))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.UnhealthyThreshold))
	}
	return n
}

func (m *AwsLbTargetGroup_Stickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieDuration != 0 {
		n += 1 + sovAwsLbTargetGroup(uint64(m.CookieDuration))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroup(uint64(l))
	}
	return n
}

func sovAwsLbTargetGroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwsLbTargetGroup(x uint64) (n int) {
	return sovAwsLbTargetGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AwsLbTargetGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbTargetGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsLbTargetGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsLbTargetGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArnSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArnSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeregistrationDelay", wireType)
			}
			m.DeregistrationDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeregistrationDelay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthCheck = append(m.HealthCheck, &AwsLbTargetGroup_HealthCheck{})
			if err := m.HealthCheck[len(m.HealthCheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyProtocolV_2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProxyProtocolV_2 = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowStart", wireType)
			}
			m.SlowStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickiness = append(m.Stickiness, &AwsLbTargetGroup_Stickiness{})
			if err := m.Stickiness[len(m.Stickiness)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAwsLbTargetGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbTargetGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAwsLbTargetGroup
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAwsLbTargetGroup
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbTargetGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAwsLbTargetGroup
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAwsLbTargetGroup
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAwsLbTargetGroup(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAwsLbTargetGroup
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbTargetGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbTargetGroup_HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbTargetGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matcher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matcher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbTargetGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbTargetGroup_Stickiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbTargetGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stickiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stickiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieDuration", wireType)
			}
			m.CookieDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbTargetGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbTargetGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsLbTargetGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsLbTargetGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbTargetGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsLbTargetGroup
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAwsLbTargetGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwsLbTargetGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwsLbTargetGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAwsLbTargetGroup
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwsLbTargetGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsLbTargetGroup   = fmt.Errorf("proto: integer overflow")
)
