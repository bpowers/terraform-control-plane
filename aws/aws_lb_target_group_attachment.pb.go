// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aws_lb_target_group_attachment.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AwsLbTargetGroupAttachment struct {
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Port             int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	TargetGroupArn   string `protobuf:"bytes,3,opt,name=target_group_arn,json=targetGroupArn,proto3" json:"target_group_arn,omitempty"`
	TargetId         string `protobuf:"bytes,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
}

func (m *AwsLbTargetGroupAttachment) Reset()      { *m = AwsLbTargetGroupAttachment{} }
func (*AwsLbTargetGroupAttachment) ProtoMessage() {}
func (*AwsLbTargetGroupAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa4f97e74e3f73e, []int{0}
}
func (m *AwsLbTargetGroupAttachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbTargetGroupAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbTargetGroupAttachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbTargetGroupAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbTargetGroupAttachment.Merge(m, src)
}
func (m *AwsLbTargetGroupAttachment) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbTargetGroupAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbTargetGroupAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbTargetGroupAttachment proto.InternalMessageInfo

func (m *AwsLbTargetGroupAttachment) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *AwsLbTargetGroupAttachment) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AwsLbTargetGroupAttachment) GetTargetGroupArn() string {
	if m != nil {
		return m.TargetGroupArn
	}
	return ""
}

func (m *AwsLbTargetGroupAttachment) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsLbTargetGroupAttachment)(nil), "terraform.aws.AwsLbTargetGroupAttachment")
}

func init() {
	proto.RegisterFile("aws_lb_target_group_attachment.proto", fileDescriptor_baa4f97e74e3f73e)
}

var fileDescriptor_baa4f97e74e3f73e = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0x2c, 0x2f, 0x8e,
	0xcf, 0x49, 0x8a, 0x2f, 0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x89, 0x4f, 0x2f, 0xca, 0x2f, 0x2d, 0x88,
	0x4f, 0x2c, 0x29, 0x49, 0x4c, 0xce, 0xc8, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x2d, 0x49, 0x2d, 0x2a, 0x4a, 0x4c, 0xcb, 0x2f, 0xca, 0xd5, 0x4b, 0x2c, 0x2f, 0x56,
	0x5a, 0xc2, 0xc8, 0x25, 0xe5, 0x58, 0x5e, 0xec, 0x93, 0x14, 0x02, 0xd6, 0xe5, 0x0e, 0xd2, 0xe4,
	0x08, 0xd7, 0x23, 0xa4, 0xcd, 0x25, 0x98, 0x58, 0x96, 0x98, 0x99, 0x93, 0x98, 0x94, 0x99, 0x93,
	0x59, 0x52, 0x19, 0x5f, 0x95, 0x9f, 0x97, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x24, 0x80,
	0x2c, 0x11, 0x95, 0x9f, 0x97, 0x2a, 0x24, 0xc4, 0xc5, 0x52, 0x90, 0x5f, 0x54, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0x66, 0x0b, 0x69, 0x70, 0x09, 0xa0, 0xba, 0xa7, 0x28, 0x4f, 0x82,
	0x19, 0xac, 0x9f, 0xaf, 0x04, 0xc9, 0xc6, 0xa2, 0x3c, 0x21, 0x69, 0x2e, 0x4e, 0xa8, 0xca, 0xcc,
	0x14, 0x09, 0x16, 0xb0, 0x12, 0x0e, 0x88, 0x80, 0x67, 0x8a, 0x93, 0xc9, 0x85, 0x87, 0x72, 0x0c,
	0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39,
	0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23,
	0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6,
	0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x97, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x1b,
	0x09, 0x60, 0x1a, 0x01, 0x00, 0x00,
}

func (this *AwsLbTargetGroupAttachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsLbTargetGroupAttachment)
	if !ok {
		that2, ok := that.(AwsLbTargetGroupAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AvailabilityZone != that1.AvailabilityZone {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.TargetGroupArn != that1.TargetGroupArn {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	return true
}
func (this *AwsLbTargetGroupAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&terraform_aws.AwsLbTargetGroupAttachment{")
	s = append(s, "AvailabilityZone: "+fmt.Sprintf("%#v", this.AvailabilityZone)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "TargetGroupArn: "+fmt.Sprintf("%#v", this.TargetGroupArn)+",\n")
	s = append(s, "TargetId: "+fmt.Sprintf("%#v", this.TargetId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAwsLbTargetGroupAttachment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AwsLbTargetGroupAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbTargetGroupAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityZone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLbTargetGroupAttachment(dAtA, i, uint64(len(m.AvailabilityZone)))
		i += copy(dAtA[i:], m.AvailabilityZone)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAwsLbTargetGroupAttachment(dAtA, i, uint64(m.Port))
	}
	if len(m.TargetGroupArn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbTargetGroupAttachment(dAtA, i, uint64(len(m.TargetGroupArn)))
		i += copy(dAtA[i:], m.TargetGroupArn)
	}
	if len(m.TargetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbTargetGroupAttachment(dAtA, i, uint64(len(m.TargetId)))
		i += copy(dAtA[i:], m.TargetId)
	}
	return i, nil
}

func encodeVarintAwsLbTargetGroupAttachment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AwsLbTargetGroupAttachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroupAttachment(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovAwsLbTargetGroupAttachment(uint64(m.Port))
	}
	l = len(m.TargetGroupArn)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroupAttachment(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovAwsLbTargetGroupAttachment(uint64(l))
	}
	return n
}

func sovAwsLbTargetGroupAttachment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwsLbTargetGroupAttachment(x uint64) (n int) {
	return sovAwsLbTargetGroupAttachment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AwsLbTargetGroupAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AwsLbTargetGroupAttachment{`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`TargetGroupArn:` + fmt.Sprintf("%v", this.TargetGroupArn) + `,`,
		`TargetId:` + fmt.Sprintf("%v", this.TargetId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAwsLbTargetGroupAttachment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AwsLbTargetGroupAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbTargetGroupAttachment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsLbTargetGroupAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsLbTargetGroupAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGroupArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetGroupArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbTargetGroupAttachment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsLbTargetGroupAttachment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsLbTargetGroupAttachment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbTargetGroupAttachment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAwsLbTargetGroupAttachment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwsLbTargetGroupAttachment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwsLbTargetGroupAttachment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAwsLbTargetGroupAttachment
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwsLbTargetGroupAttachment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsLbTargetGroupAttachment   = fmt.Errorf("proto: integer overflow")
)
