// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lb_cookie_stickiness_policy.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LbCookieStickinessPolicy struct {
	CookieExpirationPeriod int64  `protobuf:"varint,1,opt,name=cookie_expiration_period,json=cookieExpirationPeriod,proto3" json:"cookie_expiration_period,omitempty"`
	LbPort                 int64  `protobuf:"varint,2,opt,name=lb_port,json=lbPort,proto3" json:"lb_port,omitempty"`
	LoadBalancer           string `protobuf:"bytes,3,opt,name=load_balancer,json=loadBalancer,proto3" json:"load_balancer,omitempty"`
	Name                   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LbCookieStickinessPolicy) Reset()         { *m = LbCookieStickinessPolicy{} }
func (m *LbCookieStickinessPolicy) String() string { return proto.CompactTextString(m) }
func (*LbCookieStickinessPolicy) ProtoMessage()    {}
func (*LbCookieStickinessPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d98de3caeba244b, []int{0}
}
func (m *LbCookieStickinessPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LbCookieStickinessPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LbCookieStickinessPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LbCookieStickinessPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LbCookieStickinessPolicy.Merge(m, src)
}
func (m *LbCookieStickinessPolicy) XXX_Size() int {
	return m.Size()
}
func (m *LbCookieStickinessPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_LbCookieStickinessPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_LbCookieStickinessPolicy proto.InternalMessageInfo

func (m *LbCookieStickinessPolicy) GetCookieExpirationPeriod() int64 {
	if m != nil {
		return m.CookieExpirationPeriod
	}
	return 0
}

func (m *LbCookieStickinessPolicy) GetLbPort() int64 {
	if m != nil {
		return m.LbPort
	}
	return 0
}

func (m *LbCookieStickinessPolicy) GetLoadBalancer() string {
	if m != nil {
		return m.LoadBalancer
	}
	return ""
}

func (m *LbCookieStickinessPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*LbCookieStickinessPolicy)(nil), "terraform.aws.LbCookieStickinessPolicy")
}

func init() { proto.RegisterFile("lb_cookie_stickiness_policy.proto", fileDescriptor_4d98de3caeba244b) }

var fileDescriptor_4d98de3caeba244b = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x40, 0x63, 0x5a, 0x15, 0x61, 0xd1, 0xc5, 0x03, 0x78, 0xb2, 0x0a, 0x2c, 0x9d, 0xba, 0xb0,
	0x30, 0x17, 0xb1, 0x31, 0x44, 0xe1, 0x03, 0x2c, 0xdb, 0x31, 0x92, 0x15, 0xc7, 0x67, 0x9d, 0x2d,
	0x01, 0x7f, 0xc1, 0x57, 0xf0, 0x2d, 0x8c, 0x19, 0x19, 0x51, 0xf2, 0x23, 0x08, 0x37, 0xca, 0x76,
	0x7a, 0xef, 0xde, 0x49, 0x47, 0x6f, 0xbc, 0x96, 0x06, 0xa0, 0x73, 0x56, 0xa6, 0xec, 0x4c, 0xe7,
	0x82, 0x4d, 0x49, 0x46, 0xf0, 0xce, 0x7c, 0x1c, 0x22, 0x42, 0x06, 0xb6, 0xcd, 0x16, 0x51, 0xbd,
	0x02, 0xf6, 0x07, 0xf5, 0x96, 0x6e, 0xbf, 0x08, 0xe5, 0xcf, 0xfa, 0xb1, 0x34, 0x2f, 0x4b, 0x52,
	0x97, 0x82, 0x3d, 0x50, 0x3e, 0x5f, 0xb3, 0xef, 0xd1, 0xa1, 0xca, 0x0e, 0x82, 0x8c, 0x16, 0x1d,
	0xb4, 0x9c, 0xec, 0xc8, 0x7e, 0xd5, 0x5c, 0x9d, 0xfc, 0xd3, 0xa2, 0xeb, 0x62, 0xd9, 0x35, 0x3d,
	0xf7, 0x5a, 0x46, 0xc0, 0xcc, 0xcf, 0xca, 0xe2, 0xc6, 0xeb, 0x1a, 0x30, 0xb3, 0x3b, 0xba, 0xf5,
	0xa0, 0x5a, 0xa9, 0x95, 0x57, 0xc1, 0x58, 0xe4, 0xab, 0x1d, 0xd9, 0x5f, 0x34, 0x97, 0xff, 0xf0,
	0x38, 0x33, 0xc6, 0xe8, 0x3a, 0xa8, 0xde, 0xf2, 0x75, 0x71, 0x65, 0x3e, 0xf2, 0xef, 0x51, 0x90,
	0x61, 0x14, 0xe4, 0x77, 0x14, 0xe4, 0x73, 0x12, 0xd5, 0x30, 0x89, 0xea, 0x67, 0x12, 0x95, 0xde,
	0x94, 0xc7, 0xee, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x41, 0x0b, 0x1a, 0xfd, 0x00, 0x00,
	0x00,
}

func (m *LbCookieStickinessPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbCookieStickinessPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CookieExpirationPeriod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLbCookieStickinessPolicy(dAtA, i, uint64(m.CookieExpirationPeriod))
	}
	if m.LbPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLbCookieStickinessPolicy(dAtA, i, uint64(m.LbPort))
	}
	if len(m.LoadBalancer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLbCookieStickinessPolicy(dAtA, i, uint64(len(m.LoadBalancer)))
		i += copy(dAtA[i:], m.LoadBalancer)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLbCookieStickinessPolicy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintLbCookieStickinessPolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LbCookieStickinessPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieExpirationPeriod != 0 {
		n += 1 + sovLbCookieStickinessPolicy(uint64(m.CookieExpirationPeriod))
	}
	if m.LbPort != 0 {
		n += 1 + sovLbCookieStickinessPolicy(uint64(m.LbPort))
	}
	l = len(m.LoadBalancer)
	if l > 0 {
		n += 1 + l + sovLbCookieStickinessPolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLbCookieStickinessPolicy(uint64(l))
	}
	return n
}

func sovLbCookieStickinessPolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLbCookieStickinessPolicy(x uint64) (n int) {
	return sovLbCookieStickinessPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LbCookieStickinessPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLbCookieStickinessPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbCookieStickinessPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbCookieStickinessPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpirationPeriod", wireType)
			}
			m.CookieExpirationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpirationPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbPort", wireType)
			}
			m.LbPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LbPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLbCookieStickinessPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLbCookieStickinessPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLbCookieStickinessPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLbCookieStickinessPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLbCookieStickinessPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLbCookieStickinessPolicy
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLbCookieStickinessPolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLbCookieStickinessPolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLbCookieStickinessPolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLbCookieStickinessPolicy
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLbCookieStickinessPolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLbCookieStickinessPolicy   = fmt.Errorf("proto: integer overflow")
)
