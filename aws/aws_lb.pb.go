// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aws_lb.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AwsLb struct {
	AccessLogs                   []*AwsLb_AccessLogs    `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	Arn                          string                 `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	ArnSuffix                    string                 `protobuf:"bytes,3,opt,name=arn_suffix,json=arnSuffix,proto3" json:"arn_suffix,omitempty"`
	DnsName                      string                 `protobuf:"bytes,4,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	EnableCrossZoneLoadBalancing bool                   `protobuf:"varint,5,opt,name=enable_cross_zone_load_balancing,json=enableCrossZoneLoadBalancing,proto3" json:"enable_cross_zone_load_balancing,omitempty"`
	EnableDeletionProtection     bool                   `protobuf:"varint,6,opt,name=enable_deletion_protection,json=enableDeletionProtection,proto3" json:"enable_deletion_protection,omitempty"`
	EnableHttp_2                 bool                   `protobuf:"varint,7,opt,name=enable_http_2,json=enableHttp2,proto3" json:"enable_http_2,omitempty"`
	IdleTimeout                  int64                  `protobuf:"varint,8,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	Internal                     bool                   `protobuf:"varint,9,opt,name=internal,proto3" json:"internal,omitempty"`
	IpAddressType                string                 `protobuf:"bytes,10,opt,name=ip_address_type,json=ipAddressType,proto3" json:"ip_address_type,omitempty"`
	LoadBalancerType             string                 `protobuf:"bytes,11,opt,name=load_balancer_type,json=loadBalancerType,proto3" json:"load_balancer_type,omitempty"`
	Name                         string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	NamePrefix                   string                 `protobuf:"bytes,13,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	SecurityGroups               []string               `protobuf:"bytes,14,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	SubnetMapping                []*AwsLb_SubnetMapping `protobuf:"bytes,15,rep,name=subnet_mapping,json=subnetMapping,proto3" json:"subnet_mapping,omitempty"`
	Subnets                      []string               `protobuf:"bytes,16,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Tags                         map[string]string      `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VpcId                        string                 `protobuf:"bytes,18,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	ZoneId                       string                 `protobuf:"bytes,19,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (m *AwsLb) Reset()      { *m = AwsLb{} }
func (*AwsLb) ProtoMessage() {}
func (*AwsLb) Descriptor() ([]byte, []int) {
	return fileDescriptor_277761f563907c49, []int{0}
}
func (m *AwsLb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLb.Merge(m, src)
}
func (m *AwsLb) XXX_Size() int {
	return m.Size()
}
func (m *AwsLb) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLb.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLb proto.InternalMessageInfo

func (m *AwsLb) GetAccessLogs() []*AwsLb_AccessLogs {
	if m != nil {
		return m.AccessLogs
	}
	return nil
}

func (m *AwsLb) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *AwsLb) GetArnSuffix() string {
	if m != nil {
		return m.ArnSuffix
	}
	return ""
}

func (m *AwsLb) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *AwsLb) GetEnableCrossZoneLoadBalancing() bool {
	if m != nil {
		return m.EnableCrossZoneLoadBalancing
	}
	return false
}

func (m *AwsLb) GetEnableDeletionProtection() bool {
	if m != nil {
		return m.EnableDeletionProtection
	}
	return false
}

func (m *AwsLb) GetEnableHttp_2() bool {
	if m != nil {
		return m.EnableHttp_2
	}
	return false
}

func (m *AwsLb) GetIdleTimeout() int64 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *AwsLb) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *AwsLb) GetIpAddressType() string {
	if m != nil {
		return m.IpAddressType
	}
	return ""
}

func (m *AwsLb) GetLoadBalancerType() string {
	if m != nil {
		return m.LoadBalancerType
	}
	return ""
}

func (m *AwsLb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AwsLb) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *AwsLb) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *AwsLb) GetSubnetMapping() []*AwsLb_SubnetMapping {
	if m != nil {
		return m.SubnetMapping
	}
	return nil
}

func (m *AwsLb) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *AwsLb) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AwsLb) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *AwsLb) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

type AwsLb_AccessLogs struct {
	Bucket  string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Prefix  string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *AwsLb_AccessLogs) Reset()      { *m = AwsLb_AccessLogs{} }
func (*AwsLb_AccessLogs) ProtoMessage() {}
func (*AwsLb_AccessLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_277761f563907c49, []int{0, 0}
}
func (m *AwsLb_AccessLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLb_AccessLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLb_AccessLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLb_AccessLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLb_AccessLogs.Merge(m, src)
}
func (m *AwsLb_AccessLogs) XXX_Size() int {
	return m.Size()
}
func (m *AwsLb_AccessLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLb_AccessLogs.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLb_AccessLogs proto.InternalMessageInfo

func (m *AwsLb_AccessLogs) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *AwsLb_AccessLogs) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AwsLb_AccessLogs) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type AwsLb_SubnetMapping struct {
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	SubnetId     string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (m *AwsLb_SubnetMapping) Reset()      { *m = AwsLb_SubnetMapping{} }
func (*AwsLb_SubnetMapping) ProtoMessage() {}
func (*AwsLb_SubnetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_277761f563907c49, []int{0, 1}
}
func (m *AwsLb_SubnetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLb_SubnetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLb_SubnetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLb_SubnetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLb_SubnetMapping.Merge(m, src)
}
func (m *AwsLb_SubnetMapping) XXX_Size() int {
	return m.Size()
}
func (m *AwsLb_SubnetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLb_SubnetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLb_SubnetMapping proto.InternalMessageInfo

func (m *AwsLb_SubnetMapping) GetAllocationId() string {
	if m != nil {
		return m.AllocationId
	}
	return ""
}

func (m *AwsLb_SubnetMapping) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsLb)(nil), "terraform.aws.AwsLb")
	proto.RegisterMapType((map[string]string)(nil), "terraform.aws.AwsLb.TagsEntry")
	proto.RegisterType((*AwsLb_AccessLogs)(nil), "terraform.aws.AwsLb.AccessLogs")
	proto.RegisterType((*AwsLb_SubnetMapping)(nil), "terraform.aws.AwsLb.SubnetMapping")
}

func init() { proto.RegisterFile("aws_lb.proto", fileDescriptor_277761f563907c49) }

var fileDescriptor_277761f563907c49 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xa6, 0xf9, 0x9a, 0x24, 0x6d, 0x59, 0xbe, 0x96, 0x00, 0x6e, 0x28, 0x12, 0xe4,
	0x80, 0x72, 0x08, 0x48, 0x20, 0xc4, 0x81, 0x96, 0xcf, 0x48, 0x05, 0x15, 0xb7, 0xe2, 0xc0, 0x65,
	0xb5, 0xf1, 0x6e, 0x83, 0x55, 0x67, 0x6d, 0xed, 0x6e, 0x5a, 0xc2, 0x89, 0x47, 0xe0, 0x31, 0x78,
	0x14, 0x8e, 0x3d, 0xf6, 0x06, 0x4d, 0x2f, 0x1c, 0xfb, 0x08, 0x68, 0xc7, 0x4e, 0xda, 0x4a, 0x3d,
	0x65, 0xfe, 0xff, 0xf9, 0xed, 0x38, 0x33, 0x3b, 0x36, 0x34, 0xf8, 0x81, 0x61, 0xf1, 0xa0, 0x9b,
	0xea, 0xc4, 0x26, 0xa4, 0x69, 0xa5, 0xd6, 0x7c, 0x37, 0xd1, 0xa3, 0x2e, 0x3f, 0x30, 0x6b, 0x7f,
	0x2a, 0x50, 0x5a, 0x3f, 0x30, 0x9b, 0x03, 0xf2, 0x12, 0xea, 0x3c, 0x0c, 0xa5, 0x31, 0x2c, 0x4e,
	0x86, 0x86, 0x7a, 0xed, 0x62, 0xa7, 0xde, 0x5b, 0xed, 0x5e, 0xc0, 0xbb, 0x88, 0x76, 0xd7, 0x91,
	0xdb, 0x4c, 0x86, 0x26, 0x00, 0x3e, 0x8f, 0xc9, 0x0a, 0x14, 0xb9, 0x56, 0x74, 0xa1, 0xed, 0x75,
	0x6a, 0x81, 0x0b, 0xc9, 0x5d, 0x00, 0xae, 0x15, 0x33, 0xe3, 0xdd, 0xdd, 0xe8, 0x1b, 0x2d, 0x62,
	0xa2, 0xc6, 0xb5, 0xda, 0x46, 0x83, 0xdc, 0x82, 0xaa, 0x50, 0x86, 0x29, 0x3e, 0x92, 0x74, 0x11,
	0x93, 0x15, 0xa1, 0xcc, 0x47, 0x3e, 0x92, 0xe4, 0x2d, 0xb4, 0xa5, 0xe2, 0x83, 0x58, 0xb2, 0x50,
	0x27, 0xc6, 0xb0, 0xef, 0x89, 0x92, 0x2c, 0x4e, 0xb8, 0x60, 0x03, 0x1e, 0x73, 0x15, 0x46, 0x6a,
	0x48, 0x4b, 0x6d, 0xaf, 0x53, 0x0d, 0xee, 0x64, 0xdc, 0x2b, 0x87, 0x7d, 0x49, 0x94, 0xdc, 0x4c,
	0xb8, 0xd8, 0x98, 0x31, 0xe4, 0x05, 0xb4, 0xf2, 0x3a, 0x42, 0xc6, 0xd2, 0x46, 0x89, 0x62, 0x6e,
	0x0e, 0x32, 0x74, 0x21, 0x2d, 0x63, 0x05, 0x9a, 0x11, 0xaf, 0x73, 0x60, 0x6b, 0x9e, 0x27, 0x6b,
	0xd0, 0xcc, 0x4f, 0x7f, 0xb5, 0x36, 0x65, 0x3d, 0x5a, 0xc1, 0x03, 0xf5, 0xcc, 0x7c, 0x6f, 0x6d,
	0xda, 0x23, 0xf7, 0xa0, 0x11, 0x89, 0x58, 0x32, 0x1b, 0x8d, 0x64, 0x32, 0xb6, 0xb4, 0xda, 0xf6,
	0x3a, 0xc5, 0xa0, 0xee, 0xbc, 0x9d, 0xcc, 0x22, 0x2d, 0xa8, 0x46, 0xca, 0x4a, 0xad, 0x78, 0x4c,
	0x6b, 0x58, 0x61, 0xae, 0xc9, 0x03, 0x58, 0x8e, 0x52, 0xc6, 0x85, 0xd0, 0x6e, 0xf4, 0x76, 0x92,
	0x4a, 0x0a, 0x38, 0x8a, 0x66, 0x94, 0xae, 0x67, 0xee, 0xce, 0x24, 0x95, 0xe4, 0x11, 0x90, 0x73,
	0xed, 0x4b, 0x9d, 0xa1, 0x75, 0x44, 0x57, 0xe2, 0x79, 0xcf, 0x52, 0x23, 0x4d, 0x60, 0x11, 0xa7,
	0xda, 0xc0, 0x3c, 0xc6, 0x64, 0x15, 0xea, 0xee, 0x97, 0xa5, 0x5a, 0xba, 0xdb, 0x68, 0x62, 0x0a,
	0x9c, 0xb5, 0x85, 0x0e, 0x79, 0x08, 0xcb, 0x46, 0x86, 0x63, 0x1d, 0xd9, 0x09, 0x1b, 0xea, 0x64,
	0x9c, 0x1a, 0xba, 0xd4, 0x2e, 0x76, 0x6a, 0xc1, 0xd2, 0xcc, 0x7e, 0x87, 0x2e, 0xe9, 0xc3, 0x92,
	0x19, 0x0f, 0x94, 0xb4, 0x6c, 0xc4, 0xd3, 0xd4, 0x5d, 0xc5, 0x32, 0x6e, 0xcb, 0xda, 0xa5, 0xdb,
	0xb2, 0x8d, 0xe8, 0x87, 0x8c, 0x0c, 0x9a, 0xe6, 0xbc, 0x24, 0x14, 0x2a, 0x99, 0x61, 0xe8, 0x0a,
	0x3e, 0x6b, 0x26, 0x49, 0x0f, 0x16, 0x2d, 0x1f, 0x1a, 0x7a, 0x05, 0x4b, 0xfb, 0x97, 0x96, 0xde,
	0xe1, 0x43, 0xf3, 0x46, 0x59, 0x3d, 0x09, 0x90, 0x25, 0xd7, 0xa1, 0xbc, 0x9f, 0x86, 0x2c, 0x12,
	0x94, 0x60, 0x77, 0xa5, 0xfd, 0x34, 0xec, 0x0b, 0x72, 0x13, 0x2a, 0xb8, 0x3f, 0x91, 0xa0, 0x57,
	0xd1, 0x2f, 0x3b, 0xd9, 0x17, 0xad, 0xcf, 0x00, 0x67, 0xbb, 0x4c, 0x6e, 0x40, 0x79, 0x30, 0x0e,
	0xf7, 0xa4, 0xa5, 0x5e, 0x46, 0x65, 0xca, 0xfd, 0xc7, 0xec, 0xc2, 0x05, 0xee, 0x76, 0x35, 0x98,
	0x49, 0x77, 0x22, 0x9f, 0x66, 0xb6, 0xdb, 0xb9, 0x6a, 0x7d, 0x82, 0xe6, 0x85, 0xae, 0xc9, 0x7d,
	0x68, 0xf2, 0x38, 0x4e, 0x42, 0x8e, 0x1b, 0x18, 0x89, 0xfc, 0x09, 0x8d, 0x33, 0xb3, 0x2f, 0xc8,
	0x6d, 0xa8, 0xe5, 0x63, 0x8d, 0x44, 0xfe, 0x16, 0x55, 0x33, 0xa3, 0x2f, 0x5a, 0x4f, 0xa1, 0x36,
	0xef, 0xd6, 0xbd, 0x69, 0x7b, 0x72, 0x92, 0x17, 0x71, 0x21, 0xb9, 0x06, 0xa5, 0x7d, 0x1e, 0x8f,
	0x65, 0x7e, 0x2e, 0x13, 0xcf, 0x17, 0x9e, 0x79, 0x1b, 0x4f, 0x0e, 0x8f, 0xfd, 0xc2, 0xd1, 0xb1,
	0x5f, 0x38, 0x3d, 0xf6, 0xbd, 0x1f, 0x53, 0xdf, 0xfb, 0x35, 0xf5, 0xbd, 0xdf, 0x53, 0xdf, 0x3b,
	0x9c, 0xfa, 0xde, 0xdf, 0xa9, 0xef, 0xfd, 0x9b, 0xfa, 0x85, 0xd3, 0xa9, 0xef, 0xfd, 0x3c, 0xf1,
	0x0b, 0x87, 0x27, 0x7e, 0xe1, 0xe8, 0xc4, 0x2f, 0x0c, 0xca, 0xf8, 0xb5, 0x78, 0xfc, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0x60, 0x14, 0x43, 0x4b, 0x3d, 0x04, 0x00, 0x00,
}

func (this *AwsLb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsLb)
	if !ok {
		that2, ok := that.(AwsLb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccessLogs) != len(that1.AccessLogs) {
		return false
	}
	for i := range this.AccessLogs {
		if !this.AccessLogs[i].Equal(that1.AccessLogs[i]) {
			return false
		}
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.ArnSuffix != that1.ArnSuffix {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	if this.EnableCrossZoneLoadBalancing != that1.EnableCrossZoneLoadBalancing {
		return false
	}
	if this.EnableDeletionProtection != that1.EnableDeletionProtection {
		return false
	}
	if this.EnableHttp_2 != that1.EnableHttp_2 {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.IpAddressType != that1.IpAddressType {
		return false
	}
	if this.LoadBalancerType != that1.LoadBalancerType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NamePrefix != that1.NamePrefix {
		return false
	}
	if len(this.SecurityGroups) != len(that1.SecurityGroups) {
		return false
	}
	for i := range this.SecurityGroups {
		if this.SecurityGroups[i] != that1.SecurityGroups[i] {
			return false
		}
	}
	if len(this.SubnetMapping) != len(that1.SubnetMapping) {
		return false
	}
	for i := range this.SubnetMapping {
		if !this.SubnetMapping[i].Equal(that1.SubnetMapping[i]) {
			return false
		}
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if this.Subnets[i] != that1.Subnets[i] {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.ZoneId != that1.ZoneId {
		return false
	}
	return true
}
func (this *AwsLb_AccessLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsLb_AccessLogs)
	if !ok {
		that2, ok := that.(AwsLb_AccessLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *AwsLb_SubnetMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsLb_SubnetMapping)
	if !ok {
		that2, ok := that.(AwsLb_SubnetMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AllocationId != that1.AllocationId {
		return false
	}
	if this.SubnetId != that1.SubnetId {
		return false
	}
	return true
}
func (this *AwsLb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&terraform_aws.AwsLb{")
	if this.AccessLogs != nil {
		s = append(s, "AccessLogs: "+fmt.Sprintf("%#v", this.AccessLogs)+",\n")
	}
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	s = append(s, "ArnSuffix: "+fmt.Sprintf("%#v", this.ArnSuffix)+",\n")
	s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	s = append(s, "EnableCrossZoneLoadBalancing: "+fmt.Sprintf("%#v", this.EnableCrossZoneLoadBalancing)+",\n")
	s = append(s, "EnableDeletionProtection: "+fmt.Sprintf("%#v", this.EnableDeletionProtection)+",\n")
	s = append(s, "EnableHttp_2: "+fmt.Sprintf("%#v", this.EnableHttp_2)+",\n")
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "IpAddressType: "+fmt.Sprintf("%#v", this.IpAddressType)+",\n")
	s = append(s, "LoadBalancerType: "+fmt.Sprintf("%#v", this.LoadBalancerType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NamePrefix: "+fmt.Sprintf("%#v", this.NamePrefix)+",\n")
	s = append(s, "SecurityGroups: "+fmt.Sprintf("%#v", this.SecurityGroups)+",\n")
	if this.SubnetMapping != nil {
		s = append(s, "SubnetMapping: "+fmt.Sprintf("%#v", this.SubnetMapping)+",\n")
	}
	s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "ZoneId: "+fmt.Sprintf("%#v", this.ZoneId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AwsLb_AccessLogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_aws.AwsLb_AccessLogs{")
	s = append(s, "Bucket: "+fmt.Sprintf("%#v", this.Bucket)+",\n")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AwsLb_SubnetMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_aws.AwsLb_SubnetMapping{")
	s = append(s, "AllocationId: "+fmt.Sprintf("%#v", this.AllocationId)+",\n")
	s = append(s, "SubnetId: "+fmt.Sprintf("%#v", this.SubnetId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAwsLb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AwsLb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLb) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessLogs) > 0 {
		for _, msg := range m.AccessLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Arn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.ArnSuffix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.ArnSuffix)))
		i += copy(dAtA[i:], m.ArnSuffix)
	}
	if len(m.DnsName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	if m.EnableCrossZoneLoadBalancing {
		dAtA[i] = 0x28
		i++
		if m.EnableCrossZoneLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDeletionProtection {
		dAtA[i] = 0x30
		i++
		if m.EnableDeletionProtection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableHttp_2 {
		dAtA[i] = 0x38
		i++
		if m.EnableHttp_2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.Internal {
		dAtA[i] = 0x48
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IpAddressType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.IpAddressType)))
		i += copy(dAtA[i:], m.IpAddressType)
	}
	if len(m.LoadBalancerType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.LoadBalancerType)))
		i += copy(dAtA[i:], m.LoadBalancerType)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NamePrefix) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.NamePrefix)))
		i += copy(dAtA[i:], m.NamePrefix)
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SubnetMapping) > 0 {
		for _, msg := range m.SubnetMapping {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintAwsLb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAwsLb(uint64(len(k))) + 1 + len(v) + sovAwsLb(uint64(len(v)))
			i = encodeVarintAwsLb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAwsLb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.VpcId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	if len(m.ZoneId) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.ZoneId)))
		i += copy(dAtA[i:], m.ZoneId)
	}
	return i, nil
}

func (m *AwsLb_AccessLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLb_AccessLogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bucket) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	return i, nil
}

func (m *AwsLb_SubnetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLb_SubnetMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllocationId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.AllocationId)))
		i += copy(dAtA[i:], m.AllocationId)
	}
	if len(m.SubnetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLb(dAtA, i, uint64(len(m.SubnetId)))
		i += copy(dAtA[i:], m.SubnetId)
	}
	return i, nil
}

func encodeVarintAwsLb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AwsLb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessLogs) > 0 {
		for _, e := range m.AccessLogs {
			l = e.Size()
			n += 1 + l + sovAwsLb(uint64(l))
		}
	}
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.ArnSuffix)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	if m.EnableCrossZoneLoadBalancing {
		n += 2
	}
	if m.EnableDeletionProtection {
		n += 2
	}
	if m.EnableHttp_2 {
		n += 2
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovAwsLb(uint64(m.IdleTimeout))
	}
	if m.Internal {
		n += 2
	}
	l = len(m.IpAddressType)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.LoadBalancerType)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.NamePrefix)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovAwsLb(uint64(l))
		}
	}
	if len(m.SubnetMapping) > 0 {
		for _, e := range m.SubnetMapping {
			l = e.Size()
			n += 1 + l + sovAwsLb(uint64(l))
		}
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			l = len(s)
			n += 2 + l + sovAwsLb(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAwsLb(uint64(len(k))) + 1 + len(v) + sovAwsLb(uint64(len(v)))
			n += mapEntrySize + 2 + sovAwsLb(uint64(mapEntrySize))
		}
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 2 + l + sovAwsLb(uint64(l))
	}
	l = len(m.ZoneId)
	if l > 0 {
		n += 2 + l + sovAwsLb(uint64(l))
	}
	return n
}

func (m *AwsLb_AccessLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	return n
}

func (m *AwsLb_SubnetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllocationId)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovAwsLb(uint64(l))
	}
	return n
}

func sovAwsLb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwsLb(x uint64) (n int) {
	return sovAwsLb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AwsLb) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AwsLb{`,
		`AccessLogs:` + strings.Replace(fmt.Sprintf("%v", this.AccessLogs), "AwsLb_AccessLogs", "AwsLb_AccessLogs", 1) + `,`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`ArnSuffix:` + fmt.Sprintf("%v", this.ArnSuffix) + `,`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`EnableCrossZoneLoadBalancing:` + fmt.Sprintf("%v", this.EnableCrossZoneLoadBalancing) + `,`,
		`EnableDeletionProtection:` + fmt.Sprintf("%v", this.EnableDeletionProtection) + `,`,
		`EnableHttp_2:` + fmt.Sprintf("%v", this.EnableHttp_2) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`IpAddressType:` + fmt.Sprintf("%v", this.IpAddressType) + `,`,
		`LoadBalancerType:` + fmt.Sprintf("%v", this.LoadBalancerType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NamePrefix:` + fmt.Sprintf("%v", this.NamePrefix) + `,`,
		`SecurityGroups:` + fmt.Sprintf("%v", this.SecurityGroups) + `,`,
		`SubnetMapping:` + strings.Replace(fmt.Sprintf("%v", this.SubnetMapping), "AwsLb_SubnetMapping", "AwsLb_SubnetMapping", 1) + `,`,
		`Subnets:` + fmt.Sprintf("%v", this.Subnets) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`ZoneId:` + fmt.Sprintf("%v", this.ZoneId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AwsLb_AccessLogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AwsLb_AccessLogs{`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AwsLb_SubnetMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AwsLb_SubnetMapping{`,
		`AllocationId:` + fmt.Sprintf("%v", this.AllocationId) + `,`,
		`SubnetId:` + fmt.Sprintf("%v", this.SubnetId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAwsLb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AwsLb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsLb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsLb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogs = append(m.AccessLogs, &AwsLb_AccessLogs{})
			if err := m.AccessLogs[len(m.AccessLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArnSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArnSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCrossZoneLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCrossZoneLoadBalancing = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDeletionProtection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDeletionProtection = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHttp_2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHttp_2 = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddressType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddressType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetMapping = append(m.SubnetMapping, &AwsLb_SubnetMapping{})
			if err := m.SubnetMapping[len(m.SubnetMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAwsLb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAwsLb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAwsLb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAwsLb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAwsLb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAwsLb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAwsLb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLb_AccessLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLb_SubnetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsLb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsLb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsLb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAwsLb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwsLb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwsLb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAwsLb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwsLb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsLb   = fmt.Errorf("proto: integer overflow")
)
