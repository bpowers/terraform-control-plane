// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aws_lb_listener_rule.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AwsLbListenerRule struct {
	Action      []*AwsLbListenerRule_Action    `protobuf:"bytes,1,rep,name=action,proto3" json:"action,omitempty"`
	Arn         string                         `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	Condition   []*AwsLbListenerRule_Condition `protobuf:"bytes,3,rep,name=condition,proto3" json:"condition,omitempty"`
	ListenerArn string                         `protobuf:"bytes,4,opt,name=listener_arn,json=listenerArn,proto3" json:"listener_arn,omitempty"`
	Priority    int64                          `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *AwsLbListenerRule) Reset()         { *m = AwsLbListenerRule{} }
func (m *AwsLbListenerRule) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule) ProtoMessage()    {}
func (*AwsLbListenerRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0}
}
func (m *AwsLbListenerRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule.Merge(m, src)
}
func (m *AwsLbListenerRule) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule proto.InternalMessageInfo

func (m *AwsLbListenerRule) GetAction() []*AwsLbListenerRule_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *AwsLbListenerRule) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *AwsLbListenerRule) GetCondition() []*AwsLbListenerRule_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *AwsLbListenerRule) GetListenerArn() string {
	if m != nil {
		return m.ListenerArn
	}
	return ""
}

func (m *AwsLbListenerRule) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type AwsLbListenerRule_Action struct {
	AuthenticateCognito []*AwsLbListenerRule_Action_AuthenticateCognito `protobuf:"bytes,1,rep,name=authenticate_cognito,json=authenticateCognito,proto3" json:"authenticate_cognito,omitempty"`
	AuthenticateOidc    []*AwsLbListenerRule_Action_AuthenticateOidc    `protobuf:"bytes,2,rep,name=authenticate_oidc,json=authenticateOidc,proto3" json:"authenticate_oidc,omitempty"`
	FixedResponse       []*AwsLbListenerRule_Action_FixedResponse       `protobuf:"bytes,3,rep,name=fixed_response,json=fixedResponse,proto3" json:"fixed_response,omitempty"`
	Order               int64                                           `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	Redirect            []*AwsLbListenerRule_Action_Redirect            `protobuf:"bytes,5,rep,name=redirect,proto3" json:"redirect,omitempty"`
	TargetGroupArn      string                                          `protobuf:"bytes,6,opt,name=target_group_arn,json=targetGroupArn,proto3" json:"target_group_arn,omitempty"`
	Type                string                                          `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *AwsLbListenerRule_Action) Reset()         { *m = AwsLbListenerRule_Action{} }
func (m *AwsLbListenerRule_Action) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule_Action) ProtoMessage()    {}
func (*AwsLbListenerRule_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 0}
}
func (m *AwsLbListenerRule_Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Action.Merge(m, src)
}
func (m *AwsLbListenerRule_Action) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Action.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Action proto.InternalMessageInfo

func (m *AwsLbListenerRule_Action) GetAuthenticateCognito() []*AwsLbListenerRule_Action_AuthenticateCognito {
	if m != nil {
		return m.AuthenticateCognito
	}
	return nil
}

func (m *AwsLbListenerRule_Action) GetAuthenticateOidc() []*AwsLbListenerRule_Action_AuthenticateOidc {
	if m != nil {
		return m.AuthenticateOidc
	}
	return nil
}

func (m *AwsLbListenerRule_Action) GetFixedResponse() []*AwsLbListenerRule_Action_FixedResponse {
	if m != nil {
		return m.FixedResponse
	}
	return nil
}

func (m *AwsLbListenerRule_Action) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *AwsLbListenerRule_Action) GetRedirect() []*AwsLbListenerRule_Action_Redirect {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *AwsLbListenerRule_Action) GetTargetGroupArn() string {
	if m != nil {
		return m.TargetGroupArn
	}
	return ""
}

func (m *AwsLbListenerRule_Action) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type AwsLbListenerRule_Action_AuthenticateCognito struct {
	AuthenticationRequestExtraParams map[string]string `protobuf:"bytes,1,rep,name=authentication_request_extra_params,json=authenticationRequestExtraParams,proto3" json:"authentication_request_extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OnUnauthenticatedRequest         string            `protobuf:"bytes,2,opt,name=on_unauthenticated_request,json=onUnauthenticatedRequest,proto3" json:"on_unauthenticated_request,omitempty"`
	Scope                            string            `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	SessionCookieName                string            `protobuf:"bytes,4,opt,name=session_cookie_name,json=sessionCookieName,proto3" json:"session_cookie_name,omitempty"`
	SessionTimeout                   int64             `protobuf:"varint,5,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	UserPoolArn                      string            `protobuf:"bytes,6,opt,name=user_pool_arn,json=userPoolArn,proto3" json:"user_pool_arn,omitempty"`
	UserPoolClientId                 string            `protobuf:"bytes,7,opt,name=user_pool_client_id,json=userPoolClientId,proto3" json:"user_pool_client_id,omitempty"`
	UserPoolDomain                   string            `protobuf:"bytes,8,opt,name=user_pool_domain,json=userPoolDomain,proto3" json:"user_pool_domain,omitempty"`
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) Reset() {
	*m = AwsLbListenerRule_Action_AuthenticateCognito{}
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) String() string {
	return proto.CompactTextString(m)
}
func (*AwsLbListenerRule_Action_AuthenticateCognito) ProtoMessage() {}
func (*AwsLbListenerRule_Action_AuthenticateCognito) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 0, 0}
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateCognito.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateCognito.Merge(m, src)
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateCognito.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateCognito proto.InternalMessageInfo

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetAuthenticationRequestExtraParams() map[string]string {
	if m != nil {
		return m.AuthenticationRequestExtraParams
	}
	return nil
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetOnUnauthenticatedRequest() string {
	if m != nil {
		return m.OnUnauthenticatedRequest
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetSessionCookieName() string {
	if m != nil {
		return m.SessionCookieName
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetSessionTimeout() int64 {
	if m != nil {
		return m.SessionTimeout
	}
	return 0
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetUserPoolArn() string {
	if m != nil {
		return m.UserPoolArn
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetUserPoolClientId() string {
	if m != nil {
		return m.UserPoolClientId
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) GetUserPoolDomain() string {
	if m != nil {
		return m.UserPoolDomain
	}
	return ""
}

type AwsLbListenerRule_Action_AuthenticateOidc struct {
	AuthenticationRequestExtraParams map[string]string `protobuf:"bytes,1,rep,name=authentication_request_extra_params,json=authenticationRequestExtraParams,proto3" json:"authentication_request_extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AuthorizationEndpoint            string            `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	ClientId                         string            `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret                     string            `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Issuer                           string            `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	OnUnauthenticatedRequest         string            `protobuf:"bytes,6,opt,name=on_unauthenticated_request,json=onUnauthenticatedRequest,proto3" json:"on_unauthenticated_request,omitempty"`
	Scope                            string            `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	SessionCookieName                string            `protobuf:"bytes,8,opt,name=session_cookie_name,json=sessionCookieName,proto3" json:"session_cookie_name,omitempty"`
	SessionTimeout                   int64             `protobuf:"varint,9,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	TokenEndpoint                    string            `protobuf:"bytes,10,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserInfoEndpoint                 string            `protobuf:"bytes,11,opt,name=user_info_endpoint,json=userInfoEndpoint,proto3" json:"user_info_endpoint,omitempty"`
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) Reset() {
	*m = AwsLbListenerRule_Action_AuthenticateOidc{}
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule_Action_AuthenticateOidc) ProtoMessage()    {}
func (*AwsLbListenerRule_Action_AuthenticateOidc) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 0, 1}
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateOidc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateOidc.Merge(m, src)
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateOidc.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Action_AuthenticateOidc proto.InternalMessageInfo

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetAuthenticationRequestExtraParams() map[string]string {
	if m != nil {
		return m.AuthenticationRequestExtraParams
	}
	return nil
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetAuthorizationEndpoint() string {
	if m != nil {
		return m.AuthorizationEndpoint
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetOnUnauthenticatedRequest() string {
	if m != nil {
		return m.OnUnauthenticatedRequest
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetSessionCookieName() string {
	if m != nil {
		return m.SessionCookieName
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetSessionTimeout() int64 {
	if m != nil {
		return m.SessionTimeout
	}
	return 0
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetTokenEndpoint() string {
	if m != nil {
		return m.TokenEndpoint
	}
	return ""
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) GetUserInfoEndpoint() string {
	if m != nil {
		return m.UserInfoEndpoint
	}
	return ""
}

type AwsLbListenerRule_Action_FixedResponse struct {
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	MessageBody string `protobuf:"bytes,2,opt,name=message_body,json=messageBody,proto3" json:"message_body,omitempty"`
	StatusCode  string `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (m *AwsLbListenerRule_Action_FixedResponse) Reset() {
	*m = AwsLbListenerRule_Action_FixedResponse{}
}
func (m *AwsLbListenerRule_Action_FixedResponse) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule_Action_FixedResponse) ProtoMessage()    {}
func (*AwsLbListenerRule_Action_FixedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 0, 2}
}
func (m *AwsLbListenerRule_Action_FixedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Action_FixedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Action_FixedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Action_FixedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Action_FixedResponse.Merge(m, src)
}
func (m *AwsLbListenerRule_Action_FixedResponse) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Action_FixedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Action_FixedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Action_FixedResponse proto.InternalMessageInfo

func (m *AwsLbListenerRule_Action_FixedResponse) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *AwsLbListenerRule_Action_FixedResponse) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

func (m *AwsLbListenerRule_Action_FixedResponse) GetStatusCode() string {
	if m != nil {
		return m.StatusCode
	}
	return ""
}

type AwsLbListenerRule_Action_Redirect struct {
	Host       string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Port       string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Protocol   string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Query      string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	StatusCode string `protobuf:"bytes,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (m *AwsLbListenerRule_Action_Redirect) Reset()         { *m = AwsLbListenerRule_Action_Redirect{} }
func (m *AwsLbListenerRule_Action_Redirect) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule_Action_Redirect) ProtoMessage()    {}
func (*AwsLbListenerRule_Action_Redirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 0, 3}
}
func (m *AwsLbListenerRule_Action_Redirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Action_Redirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Action_Redirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Action_Redirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Action_Redirect.Merge(m, src)
}
func (m *AwsLbListenerRule_Action_Redirect) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Action_Redirect) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Action_Redirect.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Action_Redirect proto.InternalMessageInfo

func (m *AwsLbListenerRule_Action_Redirect) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AwsLbListenerRule_Action_Redirect) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AwsLbListenerRule_Action_Redirect) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *AwsLbListenerRule_Action_Redirect) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AwsLbListenerRule_Action_Redirect) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *AwsLbListenerRule_Action_Redirect) GetStatusCode() string {
	if m != nil {
		return m.StatusCode
	}
	return ""
}

type AwsLbListenerRule_Condition struct {
	Field  string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *AwsLbListenerRule_Condition) Reset()         { *m = AwsLbListenerRule_Condition{} }
func (m *AwsLbListenerRule_Condition) String() string { return proto.CompactTextString(m) }
func (*AwsLbListenerRule_Condition) ProtoMessage()    {}
func (*AwsLbListenerRule_Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bf35e90a27cc05, []int{0, 1}
}
func (m *AwsLbListenerRule_Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsLbListenerRule_Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsLbListenerRule_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsLbListenerRule_Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsLbListenerRule_Condition.Merge(m, src)
}
func (m *AwsLbListenerRule_Condition) XXX_Size() int {
	return m.Size()
}
func (m *AwsLbListenerRule_Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsLbListenerRule_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_AwsLbListenerRule_Condition proto.InternalMessageInfo

func (m *AwsLbListenerRule_Condition) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *AwsLbListenerRule_Condition) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*AwsLbListenerRule)(nil), "terraform.aws.AwsLbListenerRule")
	proto.RegisterType((*AwsLbListenerRule_Action)(nil), "terraform.aws.AwsLbListenerRule.Action")
	proto.RegisterType((*AwsLbListenerRule_Action_AuthenticateCognito)(nil), "terraform.aws.AwsLbListenerRule.Action.AuthenticateCognito")
	proto.RegisterMapType((map[string]string)(nil), "terraform.aws.AwsLbListenerRule.Action.AuthenticateCognito.AuthenticationRequestExtraParamsEntry")
	proto.RegisterType((*AwsLbListenerRule_Action_AuthenticateOidc)(nil), "terraform.aws.AwsLbListenerRule.Action.AuthenticateOidc")
	proto.RegisterMapType((map[string]string)(nil), "terraform.aws.AwsLbListenerRule.Action.AuthenticateOidc.AuthenticationRequestExtraParamsEntry")
	proto.RegisterType((*AwsLbListenerRule_Action_FixedResponse)(nil), "terraform.aws.AwsLbListenerRule.Action.FixedResponse")
	proto.RegisterType((*AwsLbListenerRule_Action_Redirect)(nil), "terraform.aws.AwsLbListenerRule.Action.Redirect")
	proto.RegisterType((*AwsLbListenerRule_Condition)(nil), "terraform.aws.AwsLbListenerRule.Condition")
}

func init() { proto.RegisterFile("aws_lb_listener_rule.proto", fileDescriptor_f8bf35e90a27cc05) }

var fileDescriptor_f8bf35e90a27cc05 = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0x89, 0x6b, 0x1f, 0xd7, 0xa9, 0x33, 0x29, 0xd5, 0xca, 0x48, 0x26, 0xb4, 0xaa,
	0x1a, 0x21, 0xb0, 0x10, 0xa8, 0x52, 0xf9, 0x91, 0x50, 0x6a, 0x02, 0x54, 0x8a, 0xa0, 0xda, 0x96,
	0x3b, 0xc4, 0x6a, 0xb2, 0x7b, 0x9c, 0x8c, 0xb2, 0x9e, 0xb3, 0x9d, 0x99, 0x6d, 0xba, 0x3c, 0x05,
	0x77, 0x88, 0x57, 0x40, 0x42, 0xe2, 0x2d, 0xe0, 0xb2, 0x97, 0x5c, 0xa2, 0xe4, 0x8e, 0xa7, 0x40,
	0x33, 0x3b, 0xeb, 0x9f, 0xa4, 0x52, 0xdc, 0x00, 0x77, 0x73, 0xbe, 0x39, 0x3f, 0x33, 0xe7, 0xfb,
	0xe6, 0xec, 0x42, 0x9f, 0x9f, 0xe8, 0x38, 0x3b, 0x88, 0x33, 0xa1, 0x0d, 0x4a, 0x54, 0xb1, 0x2a,
	0x32, 0x1c, 0xe6, 0x8a, 0x0c, 0xb1, 0xae, 0x41, 0xa5, 0xf8, 0x98, 0xd4, 0x64, 0xc8, 0x4f, 0xf4,
	0xed, 0x9f, 0x18, 0x6c, 0xee, 0x9e, 0xe8, 0xfd, 0x83, 0x7d, 0xef, 0x1b, 0x15, 0x19, 0xb2, 0xcf,
	0xa0, 0xc9, 0x13, 0x23, 0x48, 0x86, 0xc1, 0x76, 0x63, 0xa7, 0xf3, 0xc1, 0xbd, 0xe1, 0x42, 0xd4,
	0xf0, 0x42, 0xc4, 0x70, 0xd7, 0xb9, 0x47, 0x3e, 0x8c, 0xf5, 0xa0, 0xc1, 0x95, 0x0c, 0x57, 0xb7,
	0x83, 0x9d, 0x76, 0x64, 0x97, 0xec, 0x2b, 0x68, 0x27, 0x24, 0x53, 0xe1, 0xb2, 0x36, 0x5c, 0xd6,
	0x77, 0x2e, 0xcd, 0x3a, 0xaa, 0x23, 0xa2, 0x59, 0x30, 0x7b, 0x1b, 0xae, 0x4f, 0x2f, 0x66, 0x8b,
	0xac, 0xb9, 0x22, 0x9d, 0x1a, 0xdb, 0x55, 0x92, 0xf5, 0xa1, 0x95, 0x2b, 0x41, 0x4a, 0x98, 0x32,
	0x5c, 0xdf, 0x0e, 0x76, 0x1a, 0xd1, 0xd4, 0xee, 0xff, 0x7d, 0x03, 0x9a, 0xd5, 0x69, 0x99, 0x84,
	0x9b, 0xbc, 0x30, 0x47, 0x28, 0x8d, 0x48, 0xb8, 0xc1, 0x38, 0xa1, 0x43, 0x29, 0x0c, 0xf9, 0x4b,
	0x7f, 0xb2, 0xe4, 0xa5, 0x87, 0xbb, 0x73, 0x39, 0x46, 0x55, 0x8a, 0x68, 0x8b, 0x5f, 0x04, 0x19,
	0xc2, 0xe6, 0x42, 0x3d, 0x12, 0x69, 0x12, 0xae, 0xba, 0x62, 0x0f, 0xae, 0x52, 0xec, 0x1b, 0x91,
	0x26, 0x51, 0x8f, 0x9f, 0x43, 0xd8, 0x77, 0xb0, 0x31, 0x16, 0x2f, 0x30, 0x8d, 0x15, 0xea, 0x9c,
	0xa4, 0x46, 0xdf, 0xef, 0xfb, 0xcb, 0xd6, 0xf8, 0xc2, 0x46, 0x47, 0x3e, 0x38, 0xea, 0x8e, 0xe7,
	0x4d, 0x76, 0x13, 0xd6, 0x49, 0xa5, 0xa8, 0x5c, 0xdf, 0x1b, 0x51, 0x65, 0xb0, 0x7d, 0x68, 0x29,
	0x4c, 0x85, 0xc2, 0xc4, 0x84, 0xeb, 0xae, 0xda, 0xfb, 0xcb, 0x56, 0x8b, 0x7c, 0x5c, 0x34, 0xcd,
	0xc0, 0x76, 0xa0, 0x67, 0xb8, 0x3a, 0x44, 0x13, 0x1f, 0x2a, 0x2a, 0x72, 0x47, 0x73, 0xd3, 0xd1,
	0xbc, 0x51, 0xe1, 0x5f, 0x5a, 0xd8, 0x32, 0xcd, 0x60, 0xcd, 0x94, 0x39, 0x86, 0xd7, 0xdc, 0xae,
	0x5b, 0xf7, 0x7f, 0x5f, 0x83, 0xad, 0x57, 0x70, 0xc2, 0x7e, 0x0b, 0xe0, 0xce, 0x5c, 0xb3, 0x04,
	0xc9, 0x58, 0xe1, 0xb3, 0x02, 0xb5, 0x89, 0xf1, 0x85, 0x51, 0x3c, 0xce, 0xb9, 0xe2, 0x13, 0xed,
	0xe9, 0xe7, 0xff, 0x82, 0xfe, 0x79, 0xcc, 0xaa, 0xb7, 0xaa, 0xb2, 0x67, 0x8b, 0x3c, 0x76, 0x35,
	0xf6, 0xa4, 0x51, 0x65, 0xb4, 0xcd, 0x2f, 0x71, 0x63, 0x9f, 0x42, 0x9f, 0x64, 0x5c, 0xc8, 0x79,
	0x8e, 0xd3, 0xfa, 0xd4, 0xfe, 0x79, 0x85, 0x24, 0xbf, 0x5d, 0x74, 0xf0, 0x89, 0x2c, 0x55, 0x3a,
	0xa1, 0xdc, 0xf2, 0x6f, 0x1d, 0x2b, 0x83, 0x0d, 0x61, 0x4b, 0xa3, 0xd6, 0xf6, 0xfa, 0x09, 0xd1,
	0xb1, 0xc0, 0x58, 0xf2, 0x09, 0xfa, 0x67, 0xb4, 0xe9, 0xb7, 0x46, 0x6e, 0xe7, 0x6b, 0x3e, 0x41,
	0x76, 0x0f, 0x6e, 0xd4, 0xfe, 0x46, 0x4c, 0x90, 0x0a, 0xe3, 0xdf, 0xd4, 0x86, 0x87, 0x9f, 0x56,
	0x28, 0xbb, 0x0d, 0xdd, 0x42, 0xa3, 0x8a, 0x73, 0xa2, 0x6c, 0x8e, 0xb2, 0x8e, 0x05, 0x1f, 0x13,
	0x65, 0x96, 0xaf, 0xf7, 0x60, 0x6b, 0xe6, 0x93, 0x64, 0x02, 0xa5, 0x89, 0x45, 0xea, 0xe9, 0xeb,
	0xd5, 0x9e, 0x23, 0xb7, 0xf1, 0x28, 0xb5, 0x42, 0x98, 0xb9, 0xa7, 0x34, 0xe1, 0x42, 0x86, 0xad,
	0x4a, 0x08, 0xb5, 0xef, 0xe7, 0x0e, 0xed, 0x3f, 0x81, 0xbb, 0x4b, 0x35, 0xdd, 0x8e, 0xa6, 0x63,
	0x2c, 0xc3, 0xa0, 0x1a, 0x4d, 0xc7, 0x58, 0xda, 0x36, 0x3d, 0xe7, 0x59, 0x81, 0xbe, 0x9f, 0x95,
	0xf1, 0xf1, 0xea, 0x83, 0xa0, 0xff, 0xcb, 0x3a, 0xf4, 0xce, 0x3f, 0x38, 0xf6, 0xeb, 0x6b, 0xc9,
	0xe8, 0xfb, 0xab, 0x3e, 0xec, 0xff, 0x4c, 0x43, 0xf7, 0xe1, 0x96, 0xf5, 0x21, 0x25, 0x7e, 0xa8,
	0x4e, 0x8b, 0x32, 0xcd, 0x49, 0xc8, 0x5a, 0x3f, 0x6f, 0x2c, 0xec, 0xee, 0xf9, 0x4d, 0xf6, 0x26,
	0xb4, 0x67, 0xfc, 0x54, 0x02, 0x6a, 0x25, 0x35, 0x2f, 0x77, 0xa0, 0xeb, 0x37, 0x35, 0x26, 0x0a,
	0x8d, 0x57, 0xcf, 0xf5, 0x0a, 0x7c, 0xe2, 0x30, 0x76, 0x0b, 0x9a, 0x42, 0xeb, 0x02, 0x95, 0xd3,
	0x4b, 0x3b, 0xf2, 0xd6, 0x25, 0xa2, 0x6e, 0x2e, 0x2b, 0xea, 0x6b, 0x4b, 0x88, 0xba, 0xf5, 0x1a,
	0xa2, 0x6e, 0xbf, 0x52, 0xd4, 0x77, 0x61, 0xc3, 0xd0, 0x31, 0xce, 0x75, 0x0d, 0x5c, 0xce, 0xae,
	0x43, 0xa7, 0xdd, 0x7a, 0x17, 0x98, 0x13, 0xaa, 0x90, 0x63, 0x9a, 0xb9, 0x76, 0x66, 0xb2, 0x7e,
	0x24, 0xc7, 0x54, 0x7b, 0xff, 0x3f, 0x62, 0x7d, 0x0e, 0xdd, 0x85, 0xc1, 0x6d, 0x3f, 0x94, 0x09,
	0x49, 0x63, 0x59, 0x72, 0x33, 0xb2, 0xca, 0xd2, 0xf1, 0xd8, 0xd3, 0x32, 0x77, 0x2e, 0x13, 0xd4,
	0x9a, 0x1f, 0x62, 0x7c, 0x40, 0x69, 0xe9, 0x93, 0x76, 0x3c, 0xf6, 0x90, 0xd2, 0x92, 0xbd, 0x05,
	0x1d, 0x6d, 0xb8, 0x29, 0x74, 0x9c, 0x50, 0x5a, 0x8f, 0x12, 0xa8, 0xa0, 0x11, 0xa5, 0xd8, 0xff,
	0x39, 0x80, 0x56, 0x3d, 0xc3, 0xed, 0x3c, 0x3e, 0x22, 0x6d, 0x7c, 0x2d, 0xb7, 0xb6, 0x58, 0xce,
	0xcd, 0x91, 0x4f, 0xee, 0xd6, 0x0e, 0x23, 0x65, 0x7c, 0x3a, 0xb7, 0xae, 0xbe, 0xda, 0x64, 0x28,
	0xa1, 0xcc, 0xeb, 0x69, 0x6a, 0xdb, 0x6b, 0x3f, 0x2b, 0x50, 0x95, 0x5e, 0x4a, 0x95, 0x71, 0xfe,
	0x6c, 0xcd, 0x0b, 0x67, 0xfb, 0x08, 0xda, 0xd3, 0x7f, 0x08, 0x9b, 0x63, 0x2c, 0x30, 0x4b, 0xfd,
	0xe1, 0x2a, 0xc3, 0xaa, 0xd4, 0xf5, 0x50, 0xbb, 0x2f, 0x71, 0x3b, 0xf2, 0xd6, 0xc3, 0xf0, 0x8f,
	0xd3, 0x41, 0xf0, 0xf2, 0x74, 0x10, 0xfc, 0x75, 0x3a, 0x08, 0x7e, 0x3c, 0x1b, 0xac, 0xbc, 0x3c,
	0x1b, 0xac, 0xfc, 0x79, 0x36, 0x58, 0x39, 0x68, 0xba, 0x53, 0x7d, 0xf8, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x47, 0x40, 0x86, 0xda, 0x67, 0x09, 0x00, 0x00,
}

func (m *AwsLbListenerRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		for _, msg := range m.Action {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Arn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.Condition) > 0 {
		for _, msg := range m.Condition {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ListenerArn) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.ListenerArn)))
		i += copy(dAtA[i:], m.ListenerArn)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(m.Priority))
	}
	return i, nil
}

func (m *AwsLbListenerRule_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthenticateCognito) > 0 {
		for _, msg := range m.AuthenticateCognito {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AuthenticateOidc) > 0 {
		for _, msg := range m.AuthenticateOidc {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FixedResponse) > 0 {
		for _, msg := range m.FixedResponse {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Order != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(m.Order))
	}
	if len(m.Redirect) > 0 {
		for _, msg := range m.Redirect {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TargetGroupArn) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.TargetGroupArn)))
		i += copy(dAtA[i:], m.TargetGroupArn)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationRequestExtraParams) > 0 {
		for k, _ := range m.AuthenticationRequestExtraParams {
			dAtA[i] = 0xa
			i++
			v := m.AuthenticationRequestExtraParams[k]
			mapSize := 1 + len(k) + sovAwsLbListenerRule(uint64(len(k))) + 1 + len(v) + sovAwsLbListenerRule(uint64(len(v)))
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.OnUnauthenticatedRequest) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.OnUnauthenticatedRequest)))
		i += copy(dAtA[i:], m.OnUnauthenticatedRequest)
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if len(m.SessionCookieName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.SessionCookieName)))
		i += copy(dAtA[i:], m.SessionCookieName)
	}
	if m.SessionTimeout != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(m.SessionTimeout))
	}
	if len(m.UserPoolArn) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.UserPoolArn)))
		i += copy(dAtA[i:], m.UserPoolArn)
	}
	if len(m.UserPoolClientId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.UserPoolClientId)))
		i += copy(dAtA[i:], m.UserPoolClientId)
	}
	if len(m.UserPoolDomain) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.UserPoolDomain)))
		i += copy(dAtA[i:], m.UserPoolDomain)
	}
	return i, nil
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationRequestExtraParams) > 0 {
		for k, _ := range m.AuthenticationRequestExtraParams {
			dAtA[i] = 0xa
			i++
			v := m.AuthenticationRequestExtraParams[k]
			mapSize := 1 + len(k) + sovAwsLbListenerRule(uint64(len(k))) + 1 + len(v) + sovAwsLbListenerRule(uint64(len(v)))
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.AuthorizationEndpoint) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.AuthorizationEndpoint)))
		i += copy(dAtA[i:], m.AuthorizationEndpoint)
	}
	if len(m.ClientId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.ClientSecret) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.ClientSecret)))
		i += copy(dAtA[i:], m.ClientSecret)
	}
	if len(m.Issuer) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if len(m.OnUnauthenticatedRequest) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.OnUnauthenticatedRequest)))
		i += copy(dAtA[i:], m.OnUnauthenticatedRequest)
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if len(m.SessionCookieName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.SessionCookieName)))
		i += copy(dAtA[i:], m.SessionCookieName)
	}
	if m.SessionTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(m.SessionTimeout))
	}
	if len(m.TokenEndpoint) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.TokenEndpoint)))
		i += copy(dAtA[i:], m.TokenEndpoint)
	}
	if len(m.UserInfoEndpoint) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.UserInfoEndpoint)))
		i += copy(dAtA[i:], m.UserInfoEndpoint)
	}
	return i, nil
}

func (m *AwsLbListenerRule_Action_FixedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Action_FixedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.MessageBody) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.MessageBody)))
		i += copy(dAtA[i:], m.MessageBody)
	}
	if len(m.StatusCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.StatusCode)))
		i += copy(dAtA[i:], m.StatusCode)
	}
	return i, nil
}

func (m *AwsLbListenerRule_Action_Redirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Action_Redirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.StatusCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.StatusCode)))
		i += copy(dAtA[i:], m.StatusCode)
	}
	return i, nil
}

func (m *AwsLbListenerRule_Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsLbListenerRule_Condition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsLbListenerRule(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintAwsLbListenerRule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AwsLbListenerRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Action) > 0 {
		for _, e := range m.Action {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	if len(m.Condition) > 0 {
		for _, e := range m.Condition {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	l = len(m.ListenerArn)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovAwsLbListenerRule(uint64(m.Priority))
	}
	return n
}

func (m *AwsLbListenerRule_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthenticateCognito) > 0 {
		for _, e := range m.AuthenticateCognito {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	if len(m.AuthenticateOidc) > 0 {
		for _, e := range m.AuthenticateOidc {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	if len(m.FixedResponse) > 0 {
		for _, e := range m.FixedResponse {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	if m.Order != 0 {
		n += 1 + sovAwsLbListenerRule(uint64(m.Order))
	}
	if len(m.Redirect) > 0 {
		for _, e := range m.Redirect {
			l = e.Size()
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	l = len(m.TargetGroupArn)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	return n
}

func (m *AwsLbListenerRule_Action_AuthenticateCognito) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthenticationRequestExtraParams) > 0 {
		for k, v := range m.AuthenticationRequestExtraParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAwsLbListenerRule(uint64(len(k))) + 1 + len(v) + sovAwsLbListenerRule(uint64(len(v)))
			n += mapEntrySize + 1 + sovAwsLbListenerRule(uint64(mapEntrySize))
		}
	}
	l = len(m.OnUnauthenticatedRequest)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.SessionCookieName)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	if m.SessionTimeout != 0 {
		n += 1 + sovAwsLbListenerRule(uint64(m.SessionTimeout))
	}
	l = len(m.UserPoolArn)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.UserPoolClientId)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.UserPoolDomain)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	return n
}

func (m *AwsLbListenerRule_Action_AuthenticateOidc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthenticationRequestExtraParams) > 0 {
		for k, v := range m.AuthenticationRequestExtraParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAwsLbListenerRule(uint64(len(k))) + 1 + len(v) + sovAwsLbListenerRule(uint64(len(v)))
			n += mapEntrySize + 1 + sovAwsLbListenerRule(uint64(mapEntrySize))
		}
	}
	l = len(m.AuthorizationEndpoint)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.ClientSecret)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.OnUnauthenticatedRequest)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.SessionCookieName)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	if m.SessionTimeout != 0 {
		n += 1 + sovAwsLbListenerRule(uint64(m.SessionTimeout))
	}
	l = len(m.TokenEndpoint)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.UserInfoEndpoint)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	return n
}

func (m *AwsLbListenerRule_Action_FixedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.MessageBody)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.StatusCode)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	return n
}

func (m *AwsLbListenerRule_Action_Redirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	l = len(m.StatusCode)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	return n
}

func (m *AwsLbListenerRule_Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovAwsLbListenerRule(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovAwsLbListenerRule(uint64(l))
		}
	}
	return n
}

func sovAwsLbListenerRule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwsLbListenerRule(x uint64) (n int) {
	return sovAwsLbListenerRule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AwsLbListenerRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsLbListenerRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsLbListenerRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, &AwsLbListenerRule_Action{})
			if err := m.Action[len(m.Action)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = append(m.Condition, &AwsLbListenerRule_Condition{})
			if err := m.Condition[len(m.Condition)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenerArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticateCognito", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticateCognito = append(m.AuthenticateCognito, &AwsLbListenerRule_Action_AuthenticateCognito{})
			if err := m.AuthenticateCognito[len(m.AuthenticateCognito)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticateOidc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticateOidc = append(m.AuthenticateOidc, &AwsLbListenerRule_Action_AuthenticateOidc{})
			if err := m.AuthenticateOidc[len(m.AuthenticateOidc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedResponse = append(m.FixedResponse, &AwsLbListenerRule_Action_FixedResponse{})
			if err := m.FixedResponse[len(m.FixedResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redirect = append(m.Redirect, &AwsLbListenerRule_Action_Redirect{})
			if err := m.Redirect[len(m.Redirect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGroupArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetGroupArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Action_AuthenticateCognito) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateCognito: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateCognito: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationRequestExtraParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationRequestExtraParams == nil {
				m.AuthenticationRequestExtraParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAwsLbListenerRule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbListenerRule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbListenerRule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuthenticationRequestExtraParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUnauthenticatedRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnUnauthenticatedRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionCookieName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTimeout", wireType)
			}
			m.SessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPoolArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPoolArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPoolClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPoolClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPoolDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPoolDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Action_AuthenticateOidc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateOidc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateOidc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationRequestExtraParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationRequestExtraParams == nil {
				m.AuthenticationRequestExtraParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAwsLbListenerRule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbListenerRule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwsLbListenerRule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAwsLbListenerRule
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuthenticationRequestExtraParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUnauthenticatedRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnUnauthenticatedRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionCookieName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTimeout", wireType)
			}
			m.SessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Action_FixedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Action_Redirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsLbListenerRule_Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsLbListenerRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsLbListenerRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsLbListenerRule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsLbListenerRule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsLbListenerRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsLbListenerRule
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAwsLbListenerRule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwsLbListenerRule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwsLbListenerRule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAwsLbListenerRule
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwsLbListenerRule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsLbListenerRule   = fmt.Errorf("proto: integer overflow")
)
