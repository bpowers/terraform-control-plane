// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lb_listener_certificate.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LbListenerCertificate struct {
	CertificateArn string `protobuf:"bytes,1,opt,name=certificate_arn,json=certificateArn,proto3" json:"certificate_arn,omitempty"`
	ListenerArn    string `protobuf:"bytes,2,opt,name=listener_arn,json=listenerArn,proto3" json:"listener_arn,omitempty"`
}

func (m *LbListenerCertificate) Reset()         { *m = LbListenerCertificate{} }
func (m *LbListenerCertificate) String() string { return proto.CompactTextString(m) }
func (*LbListenerCertificate) ProtoMessage()    {}
func (*LbListenerCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a43ccd5352b79b6, []int{0}
}
func (m *LbListenerCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LbListenerCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LbListenerCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LbListenerCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LbListenerCertificate.Merge(m, src)
}
func (m *LbListenerCertificate) XXX_Size() int {
	return m.Size()
}
func (m *LbListenerCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_LbListenerCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_LbListenerCertificate proto.InternalMessageInfo

func (m *LbListenerCertificate) GetCertificateArn() string {
	if m != nil {
		return m.CertificateArn
	}
	return ""
}

func (m *LbListenerCertificate) GetListenerArn() string {
	if m != nil {
		return m.ListenerArn
	}
	return ""
}

func init() {
	proto.RegisterType((*LbListenerCertificate)(nil), "terraform.aws.LbListenerCertificate")
}

func init() { proto.RegisterFile("lb_listener_certificate.proto", fileDescriptor_3a43ccd5352b79b6) }

var fileDescriptor_3a43ccd5352b79b6 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x49, 0x8a, 0xcf,
	0xc9, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0x2d, 0x8a, 0x4f, 0x4e, 0x2d, 0x2a, 0xc9, 0x4c, 0xcb, 0x4c,
	0x4e, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x49, 0x2d, 0x2a, 0x4a,
	0x4c, 0xcb, 0x2f, 0xca, 0xd5, 0x4b, 0x2c, 0x2f, 0x56, 0x4a, 0xe6, 0x12, 0xf5, 0x49, 0xf2, 0x81,
	0x2a, 0x77, 0x46, 0xa8, 0x16, 0x52, 0xe7, 0xe2, 0x47, 0xd2, 0x1c, 0x9f, 0x58, 0x94, 0x27, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x87, 0x24, 0xec, 0x58, 0x94, 0x27, 0xa4, 0xc8, 0xc5, 0x03,
	0xb7, 0x0e, 0xa4, 0x8a, 0x09, 0xac, 0x8a, 0x1b, 0x26, 0xe6, 0x58, 0x94, 0xe7, 0x24, 0x71, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70,
	0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x47, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x46, 0x0e, 0xeb, 0xb5, 0x00, 0x00, 0x00,
}

func (m *LbListenerCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbListenerCertificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CertificateArn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLbListenerCertificate(dAtA, i, uint64(len(m.CertificateArn)))
		i += copy(dAtA[i:], m.CertificateArn)
	}
	if len(m.ListenerArn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLbListenerCertificate(dAtA, i, uint64(len(m.ListenerArn)))
		i += copy(dAtA[i:], m.ListenerArn)
	}
	return i, nil
}

func encodeVarintLbListenerCertificate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LbListenerCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateArn)
	if l > 0 {
		n += 1 + l + sovLbListenerCertificate(uint64(l))
	}
	l = len(m.ListenerArn)
	if l > 0 {
		n += 1 + l + sovLbListenerCertificate(uint64(l))
	}
	return n
}

func sovLbListenerCertificate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLbListenerCertificate(x uint64) (n int) {
	return sovLbListenerCertificate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LbListenerCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLbListenerCertificate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbListenerCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbListenerCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbListenerCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLbListenerCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenerArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLbListenerCertificate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLbListenerCertificate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLbListenerCertificate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLbListenerCertificate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLbListenerCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLbListenerCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLbListenerCertificate
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLbListenerCertificate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLbListenerCertificate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLbListenerCertificate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLbListenerCertificate
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLbListenerCertificate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLbListenerCertificate   = fmt.Errorf("proto: integer overflow")
)
