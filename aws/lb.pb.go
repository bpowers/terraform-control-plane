// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lb.proto

package terraform_aws

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Lb struct {
	AccessLogs                   []*Lb_AccessLogs    `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	Arn                          string              `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	ArnSuffix                    string              `protobuf:"bytes,3,opt,name=arn_suffix,json=arnSuffix,proto3" json:"arn_suffix,omitempty"`
	DnsName                      string              `protobuf:"bytes,4,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	EnableCrossZoneLoadBalancing bool                `protobuf:"varint,5,opt,name=enable_cross_zone_load_balancing,json=enableCrossZoneLoadBalancing,proto3" json:"enable_cross_zone_load_balancing,omitempty"`
	EnableDeletionProtection     bool                `protobuf:"varint,6,opt,name=enable_deletion_protection,json=enableDeletionProtection,proto3" json:"enable_deletion_protection,omitempty"`
	EnableHttp_2                 bool                `protobuf:"varint,7,opt,name=enable_http_2,json=enableHttp2,proto3" json:"enable_http_2,omitempty"`
	IdleTimeout                  int64               `protobuf:"varint,8,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	Internal                     bool                `protobuf:"varint,9,opt,name=internal,proto3" json:"internal,omitempty"`
	IpAddressType                string              `protobuf:"bytes,10,opt,name=ip_address_type,json=ipAddressType,proto3" json:"ip_address_type,omitempty"`
	LoadBalancerType             string              `protobuf:"bytes,11,opt,name=load_balancer_type,json=loadBalancerType,proto3" json:"load_balancer_type,omitempty"`
	Name                         string              `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	NamePrefix                   string              `protobuf:"bytes,13,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	SecurityGroups               []string            `protobuf:"bytes,14,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	SubnetMapping                []*Lb_SubnetMapping `protobuf:"bytes,15,rep,name=subnet_mapping,json=subnetMapping,proto3" json:"subnet_mapping,omitempty"`
	Subnets                      []string            `protobuf:"bytes,16,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Tags                         map[string]string   `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VpcId                        string              `protobuf:"bytes,18,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	ZoneId                       string              `protobuf:"bytes,19,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (m *Lb) Reset()         { *m = Lb{} }
func (m *Lb) String() string { return proto.CompactTextString(m) }
func (*Lb) ProtoMessage()    {}
func (*Lb) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ee7e19931f74eb, []int{0}
}
func (m *Lb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lb.Merge(m, src)
}
func (m *Lb) XXX_Size() int {
	return m.Size()
}
func (m *Lb) XXX_DiscardUnknown() {
	xxx_messageInfo_Lb.DiscardUnknown(m)
}

var xxx_messageInfo_Lb proto.InternalMessageInfo

func (m *Lb) GetAccessLogs() []*Lb_AccessLogs {
	if m != nil {
		return m.AccessLogs
	}
	return nil
}

func (m *Lb) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *Lb) GetArnSuffix() string {
	if m != nil {
		return m.ArnSuffix
	}
	return ""
}

func (m *Lb) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *Lb) GetEnableCrossZoneLoadBalancing() bool {
	if m != nil {
		return m.EnableCrossZoneLoadBalancing
	}
	return false
}

func (m *Lb) GetEnableDeletionProtection() bool {
	if m != nil {
		return m.EnableDeletionProtection
	}
	return false
}

func (m *Lb) GetEnableHttp_2() bool {
	if m != nil {
		return m.EnableHttp_2
	}
	return false
}

func (m *Lb) GetIdleTimeout() int64 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *Lb) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *Lb) GetIpAddressType() string {
	if m != nil {
		return m.IpAddressType
	}
	return ""
}

func (m *Lb) GetLoadBalancerType() string {
	if m != nil {
		return m.LoadBalancerType
	}
	return ""
}

func (m *Lb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Lb) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *Lb) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *Lb) GetSubnetMapping() []*Lb_SubnetMapping {
	if m != nil {
		return m.SubnetMapping
	}
	return nil
}

func (m *Lb) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *Lb) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Lb) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *Lb) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

type Lb_AccessLogs struct {
	Bucket  string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Prefix  string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *Lb_AccessLogs) Reset()         { *m = Lb_AccessLogs{} }
func (m *Lb_AccessLogs) String() string { return proto.CompactTextString(m) }
func (*Lb_AccessLogs) ProtoMessage()    {}
func (*Lb_AccessLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ee7e19931f74eb, []int{0, 0}
}
func (m *Lb_AccessLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lb_AccessLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lb_AccessLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lb_AccessLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lb_AccessLogs.Merge(m, src)
}
func (m *Lb_AccessLogs) XXX_Size() int {
	return m.Size()
}
func (m *Lb_AccessLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_Lb_AccessLogs.DiscardUnknown(m)
}

var xxx_messageInfo_Lb_AccessLogs proto.InternalMessageInfo

func (m *Lb_AccessLogs) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Lb_AccessLogs) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Lb_AccessLogs) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type Lb_SubnetMapping struct {
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	SubnetId     string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (m *Lb_SubnetMapping) Reset()         { *m = Lb_SubnetMapping{} }
func (m *Lb_SubnetMapping) String() string { return proto.CompactTextString(m) }
func (*Lb_SubnetMapping) ProtoMessage()    {}
func (*Lb_SubnetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ee7e19931f74eb, []int{0, 1}
}
func (m *Lb_SubnetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lb_SubnetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lb_SubnetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lb_SubnetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lb_SubnetMapping.Merge(m, src)
}
func (m *Lb_SubnetMapping) XXX_Size() int {
	return m.Size()
}
func (m *Lb_SubnetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_Lb_SubnetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_Lb_SubnetMapping proto.InternalMessageInfo

func (m *Lb_SubnetMapping) GetAllocationId() string {
	if m != nil {
		return m.AllocationId
	}
	return ""
}

func (m *Lb_SubnetMapping) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func init() {
	proto.RegisterType((*Lb)(nil), "terraform.aws.Lb")
	proto.RegisterMapType((map[string]string)(nil), "terraform.aws.Lb.TagsEntry")
	proto.RegisterType((*Lb_AccessLogs)(nil), "terraform.aws.Lb.AccessLogs")
	proto.RegisterType((*Lb_SubnetMapping)(nil), "terraform.aws.Lb.SubnetMapping")
}

func init() { proto.RegisterFile("lb.proto", fileDescriptor_36ee7e19931f74eb) }

var fileDescriptor_36ee7e19931f74eb = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0xed, 0x36, 0x6d, 0xb2, 0x99, 0x74, 0xdb, 0x62, 0xbe, 0x4c, 0x5a, 0xd2, 0x50, 0x24, 0xc8,
	0x01, 0x05, 0xa9, 0x1c, 0x40, 0x08, 0x0e, 0x2d, 0x50, 0x88, 0x14, 0x50, 0xd9, 0x56, 0x1c, 0xb8,
	0x58, 0xde, 0xb5, 0x1b, 0x56, 0xdd, 0xd8, 0x2b, 0xdb, 0x5b, 0x08, 0xbf, 0x82, 0x9f, 0xc5, 0xb1,
	0x12, 0x17, 0x8e, 0xa8, 0xf9, 0x23, 0xc8, 0xf6, 0x26, 0x6d, 0xd5, 0x53, 0xe6, 0xbd, 0x79, 0x33,
	0xce, 0x8c, 0x9f, 0x17, 0xc2, 0x3c, 0xe9, 0x17, 0x4a, 0x1a, 0x89, 0x22, 0xc3, 0x95, 0xa2, 0xc7,
	0x52, 0x8d, 0xfb, 0xf4, 0xbb, 0xde, 0xfe, 0xd3, 0x80, 0xc5, 0x61, 0x82, 0x5e, 0x43, 0x8b, 0xa6,
	0x29, 0xd7, 0x9a, 0xe4, 0x72, 0xa4, 0x71, 0xd0, 0xad, 0xf5, 0x5a, 0x3b, 0x9b, 0xfd, 0x2b, 0xda,
	0xfe, 0x30, 0xe9, 0xef, 0x3a, 0xd1, 0x50, 0x8e, 0x74, 0x0c, 0x74, 0x1e, 0xa3, 0x75, 0xa8, 0x51,
	0x25, 0xf0, 0x62, 0x37, 0xe8, 0x35, 0x63, 0x1b, 0xa2, 0xfb, 0x00, 0x54, 0x09, 0xa2, 0xcb, 0xe3,
	0xe3, 0xec, 0x07, 0xae, 0xb9, 0x44, 0x93, 0x2a, 0x71, 0xe8, 0x08, 0x74, 0x0f, 0x42, 0x26, 0x34,
	0x11, 0x74, 0xcc, 0xf1, 0x92, 0x4b, 0x36, 0x98, 0xd0, 0x9f, 0xe8, 0x98, 0xa3, 0x7d, 0xe8, 0x72,
	0x41, 0x93, 0x9c, 0x93, 0x54, 0x49, 0xad, 0xc9, 0x4f, 0x29, 0x38, 0xc9, 0x25, 0x65, 0x24, 0xa1,
	0x39, 0x15, 0x69, 0x26, 0x46, 0x78, 0xb9, 0x1b, 0xf4, 0xc2, 0x78, 0xd3, 0xeb, 0xde, 0x58, 0xd9,
	0x57, 0x29, 0xf8, 0x50, 0x52, 0xb6, 0x37, 0xd3, 0xa0, 0x57, 0xd0, 0xae, 0xfa, 0x30, 0x9e, 0x73,
	0x93, 0x49, 0x41, 0xec, 0x06, 0x78, 0x6a, 0x43, 0x5c, 0x77, 0x1d, 0xb0, 0x57, 0xbc, 0xad, 0x04,
	0x07, 0xf3, 0x3c, 0xda, 0x86, 0xa8, 0xaa, 0xfe, 0x66, 0x4c, 0x41, 0x76, 0x70, 0xc3, 0x15, 0xb4,
	0x3c, 0xf9, 0xc1, 0x98, 0x62, 0x07, 0x3d, 0x80, 0x95, 0x8c, 0xe5, 0x9c, 0x98, 0x6c, 0xcc, 0x65,
	0x69, 0x70, 0xd8, 0x0d, 0x7a, 0xb5, 0xb8, 0x65, 0xb9, 0x23, 0x4f, 0xa1, 0x36, 0x84, 0x99, 0x30,
	0x5c, 0x09, 0x9a, 0xe3, 0xa6, 0xeb, 0x30, 0xc7, 0xe8, 0x11, 0xac, 0x65, 0x05, 0xa1, 0x8c, 0x29,
	0xbb, 0x77, 0x33, 0x29, 0x38, 0x06, 0xb7, 0x8a, 0x28, 0x2b, 0x76, 0x3d, 0x7b, 0x34, 0x29, 0x38,
	0x7a, 0x02, 0xe8, 0xd2, 0xf8, 0x5c, 0x79, 0x69, 0xcb, 0x49, 0xd7, 0xf3, 0xf9, 0xcc, 0x5c, 0x39,
	0x35, 0x82, 0x25, 0xb7, 0xd5, 0x15, 0x97, 0x77, 0x31, 0xda, 0x82, 0x96, 0xfd, 0x25, 0x85, 0xe2,
	0xf6, 0x36, 0x22, 0x97, 0x02, 0x4b, 0x1d, 0x38, 0x06, 0x3d, 0x86, 0x35, 0xcd, 0xd3, 0x52, 0x65,
	0x66, 0x42, 0x46, 0x4a, 0x96, 0x85, 0xc6, 0xab, 0xdd, 0x5a, 0xaf, 0x19, 0xaf, 0xce, 0xe8, 0xf7,
	0x8e, 0x45, 0xfb, 0xb0, 0xaa, 0xcb, 0x44, 0x70, 0x43, 0xc6, 0xb4, 0x28, 0xec, 0x55, 0xac, 0x39,
	0xab, 0x6c, 0x5d, 0xb7, 0xca, 0xa1, 0xd3, 0x7d, 0xf4, 0xb2, 0x38, 0xd2, 0x97, 0x21, 0xc2, 0xd0,
	0xf0, 0x84, 0xc6, 0xeb, 0xee, 0xa0, 0x19, 0x44, 0x4f, 0x61, 0xc9, 0xd0, 0x91, 0xc6, 0x37, 0x5c,
	0xdf, 0x8d, 0xeb, 0x7d, 0x8f, 0xe8, 0x48, 0xbf, 0x13, 0x46, 0x4d, 0x62, 0x27, 0x44, 0xb7, 0xa1,
	0x7e, 0x5a, 0xa4, 0x24, 0x63, 0x18, 0xb9, 0xb9, 0x96, 0x4f, 0x8b, 0x74, 0xc0, 0xd0, 0x5d, 0x68,
	0x38, 0xe7, 0x64, 0x0c, 0xdf, 0x74, 0x7c, 0xdd, 0xc2, 0x01, 0x6b, 0x7f, 0x01, 0xb8, 0x70, 0x31,
	0xba, 0x03, 0xf5, 0xa4, 0x4c, 0x4f, 0xb8, 0xc1, 0x81, 0x57, 0x79, 0x64, 0xff, 0xa0, 0xbf, 0x6a,
	0xe6, 0x5c, 0x1d, 0xc6, 0x33, 0x68, 0x2b, 0xaa, 0x3d, 0x7a, 0x57, 0x57, 0xa8, 0xfd, 0x19, 0xa2,
	0x2b, 0x23, 0xa3, 0x87, 0x10, 0xd1, 0x3c, 0x97, 0x29, 0x75, 0xde, 0xcb, 0x58, 0x75, 0xc2, 0xca,
	0x05, 0x39, 0x60, 0x68, 0x03, 0x9a, 0xd5, 0x42, 0x33, 0x56, 0xbd, 0x9f, 0xd0, 0x13, 0x03, 0xd6,
	0x7e, 0x0e, 0xcd, 0xf9, 0xb4, 0xf6, 0x8d, 0x9d, 0xf0, 0x49, 0xd5, 0xc4, 0x86, 0xe8, 0x16, 0x2c,
	0x9f, 0xd2, 0xbc, 0xe4, 0x55, 0x9d, 0x07, 0x2f, 0x17, 0x5f, 0x04, 0x7b, 0xf8, 0xf7, 0x79, 0x27,
	0x38, 0x3b, 0xef, 0x04, 0xff, 0xce, 0x3b, 0xc1, 0xaf, 0x69, 0x67, 0xe1, 0x6c, 0xda, 0x59, 0xf8,
	0x3b, 0xed, 0x2c, 0x24, 0x75, 0xf7, 0x15, 0x78, 0xf6, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xa7,
	0x1d, 0x4c, 0x11, 0x04, 0x00, 0x00,
}

func (m *Lb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lb) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessLogs) > 0 {
		for _, msg := range m.AccessLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Arn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.ArnSuffix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.ArnSuffix)))
		i += copy(dAtA[i:], m.ArnSuffix)
	}
	if len(m.DnsName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	if m.EnableCrossZoneLoadBalancing {
		dAtA[i] = 0x28
		i++
		if m.EnableCrossZoneLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDeletionProtection {
		dAtA[i] = 0x30
		i++
		if m.EnableDeletionProtection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableHttp_2 {
		dAtA[i] = 0x38
		i++
		if m.EnableHttp_2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLb(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.Internal {
		dAtA[i] = 0x48
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IpAddressType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.IpAddressType)))
		i += copy(dAtA[i:], m.IpAddressType)
	}
	if len(m.LoadBalancerType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.LoadBalancerType)))
		i += copy(dAtA[i:], m.LoadBalancerType)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NamePrefix) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.NamePrefix)))
		i += copy(dAtA[i:], m.NamePrefix)
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SubnetMapping) > 0 {
		for _, msg := range m.SubnetMapping {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintLb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovLb(uint64(len(k))) + 1 + len(v) + sovLb(uint64(len(v)))
			i = encodeVarintLb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintLb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintLb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.VpcId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	if len(m.ZoneId) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.ZoneId)))
		i += copy(dAtA[i:], m.ZoneId)
	}
	return i, nil
}

func (m *Lb_AccessLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lb_AccessLogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bucket) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	return i, nil
}

func (m *Lb_SubnetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lb_SubnetMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllocationId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.AllocationId)))
		i += copy(dAtA[i:], m.AllocationId)
	}
	if len(m.SubnetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLb(dAtA, i, uint64(len(m.SubnetId)))
		i += copy(dAtA[i:], m.SubnetId)
	}
	return i, nil
}

func encodeVarintLb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Lb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessLogs) > 0 {
		for _, e := range m.AccessLogs {
			l = e.Size()
			n += 1 + l + sovLb(uint64(l))
		}
	}
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.ArnSuffix)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	if m.EnableCrossZoneLoadBalancing {
		n += 2
	}
	if m.EnableDeletionProtection {
		n += 2
	}
	if m.EnableHttp_2 {
		n += 2
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovLb(uint64(m.IdleTimeout))
	}
	if m.Internal {
		n += 2
	}
	l = len(m.IpAddressType)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.LoadBalancerType)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.NamePrefix)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovLb(uint64(l))
		}
	}
	if len(m.SubnetMapping) > 0 {
		for _, e := range m.SubnetMapping {
			l = e.Size()
			n += 1 + l + sovLb(uint64(l))
		}
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			l = len(s)
			n += 2 + l + sovLb(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLb(uint64(len(k))) + 1 + len(v) + sovLb(uint64(len(v)))
			n += mapEntrySize + 2 + sovLb(uint64(mapEntrySize))
		}
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 2 + l + sovLb(uint64(l))
	}
	l = len(m.ZoneId)
	if l > 0 {
		n += 2 + l + sovLb(uint64(l))
	}
	return n
}

func (m *Lb_AccessLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	return n
}

func (m *Lb_SubnetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllocationId)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovLb(uint64(l))
	}
	return n
}

func sovLb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLb(x uint64) (n int) {
	return sovLb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogs = append(m.AccessLogs, &Lb_AccessLogs{})
			if err := m.AccessLogs[len(m.AccessLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArnSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArnSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCrossZoneLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCrossZoneLoadBalancing = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDeletionProtection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDeletionProtection = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHttp_2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHttp_2 = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddressType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddressType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetMapping = append(m.SubnetMapping, &Lb_SubnetMapping{})
			if err := m.SubnetMapping[len(m.SubnetMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lb_AccessLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lb_SubnetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLb   = fmt.Errorf("proto: integer overflow")
)
